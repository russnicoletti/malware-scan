package com.symphony.malware.scan.service;

import com.symphony.container.connector.metric.SymproxMetricReportCache;
import com.symphony.logging.TraceIdProvider;
import com.symphony.malware.scan.MalwareScanRequest;
import com.symphony.malware.scan.MalwareScanResponse;
import com.symphony.malware.scan.connector.MalwareScanContainerConnector;
import com.symphony.malware.scan.connector.MalwareScanRlpCallExecutor;
import com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfigProvider;
import com.symphony.malware.scan.converter.ProtoDtoConverter;
import com.symphony.malware.scan.metrics.MalwareScanningMetrics;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.processor.CreateStateMalwareScanProcessor;
import com.symphony.malware.scan.processor.PrepareForReScanMalwareScanProcessor;
import com.symphony.malware.scan.processor.Processor;
import com.symphony.malware.scan.processor.SendRequestMalwareScanProcessor;
import com.symphony.malware.scan.processor.UpdateStateMalwareScanProcessor;
import com.symphony.malware.scan.processor.ValidateMalwareScanProcessor;
import com.symphony.malware.scan.proto.MalwareScanServiceProtobufFactory;
import com.symphony.malware.scan.proto.MalwareScanServiceProtobufFactoryImpl;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.MDC;

import java.util.LinkedList;
import java.util.List;

/**
 * Sends {@link MalwareScanRequestDto} to symproxy for the processing via the RLP
 * Serves as an entry point for attachments malware scan
 */
@Slf4j
public class MalwareScanOperationService {

    private final Processor<MalwareScanRequestDto, MalwareScanResponseDto> validateMalwareScanProcessor;
    private final List<Processor<MalwareScanRequestDto, MalwareScanResponseDto>> initialScanProcessors;
    private final List<Processor<MalwareScanRequestDto, MalwareScanResponseDto>> retryScanProcessors;

  public MalwareScanOperationService(
      final MalwareScanContainerConnector malwareScanContainerConnector,
      final SymproxMetricReportCache symproxMetricReportCache,
      final MalwareScanRlpCallExecutor malwareScanRlpCallExecutor,
      final MalwareScanContainerConnectorConfigProvider malwareScanContainerConnectorConfigProvider,
      final MalwareScanValidationService malwareScanValidationService,
      final MalwareScanOperationPersistenceService malwareScanOperationPersistenceService,
      final MalwareScanningMetrics malwareScanningMetrics,
      final ProtoDtoConverter<MalwareScanRequest, MalwareScanRequestDto> malwareScanRequestProtoDtoConverter,
      final ProtoDtoConverter<MalwareScanResponse, MalwareScanResponseDto> malwareScanResponseProtoDtoConverter
  ) {
      final MalwareScanServiceProtobufFactory malwareScanServiceProtobufFactory = new MalwareScanServiceProtobufFactoryImpl(
          malwareScanContainerConnector, symproxMetricReportCache, malwareScanRlpCallExecutor, malwareScanContainerConnectorConfigProvider);

      validateMalwareScanProcessor = new ValidateMalwareScanProcessor(malwareScanValidationService);

      initialScanProcessors = new LinkedList<>();
      initialScanProcessors.add(new CreateStateMalwareScanProcessor(malwareScanOperationPersistenceService));
      initialScanProcessors.add(new SendRequestMalwareScanProcessor(malwareScanServiceProtobufFactory,
              malwareScanRequestProtoDtoConverter, malwareScanResponseProtoDtoConverter, malwareScanningMetrics));
      initialScanProcessors.add(new UpdateStateMalwareScanProcessor(malwareScanOperationPersistenceService));

      retryScanProcessors = new LinkedList<>();
      retryScanProcessors.add(new PrepareForReScanMalwareScanProcessor(malwareScanOperationPersistenceService));
      retryScanProcessors.add(new SendRequestMalwareScanProcessor(malwareScanServiceProtobufFactory,
              malwareScanRequestProtoDtoConverter, malwareScanResponseProtoDtoConverter, malwareScanningMetrics));
      retryScanProcessors.add(new UpdateStateMalwareScanProcessor(malwareScanOperationPersistenceService));
    }

    /**
     * When a file is first being submitted for scanning:
     * Builds and sends a request to symproxy for malware scanning for each malware scan request respectively.
     * A side affect of this method is creating the initial MalwareScanFileState table entry (status is PENDING)
     * @param malwareScanRequestDto {@link List} of {@link MalwareScanRequestDto}s
     * @return {@link List} of {@link MalwareScanResponseDto}s
     */
    public MalwareScanResponseDto scan(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        return scan(malwareScanRequestDto, initialScanProcessors);
    }

    /**
     * When a file is being re-submitted for scanning:
     * Builds and sends a request to symproxy for malware scanning for each malware scan request respectively
     * This method doesn't have the side affect of this method is creating the initial MalwareScanFileState table entry
     * because the initial entry has already been created at the time of re-submitting a file for scanning.
     * @param malwareScanRequestDto {@link List} of {@link MalwareScanRequestDto}s
     * @return {@link List} of {@link MalwareScanResponseDto}s
     */
    public MalwareScanResponseDto retryScan(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        return scan(malwareScanRequestDto, retryScanProcessors);
    }

    private MalwareScanResponseDto scan(final MalwareScanRequestDto malwareScanRequestDto, List<Processor<MalwareScanRequestDto, MalwareScanResponseDto>> processors) throws MalwareScanException {

        // Set the trace Id to the value which was created at the beginning of the processing of this request
        String traceId = MDC.get("X-Trace-Id");
        malwareScanRequestDto.toBuilder().traceId(traceId).build();
        MalwareScanResponseDto malwareScanResponseDto = validateMalwareScanProcessor.process(malwareScanRequestDto);

        for (Processor<MalwareScanRequestDto, MalwareScanResponseDto> malwareScanProcessor : processors) {
            // Make sure that previous processor did not fail before going further to the next processor
            if (MalwareScanResponseDto.Status.SUCCESS.equals(malwareScanResponseDto.getStatus())) {
                // Update malware scan response with the response from current processor
                malwareScanResponseDto = malwareScanProcessor.process(malwareScanResponseDto.getMalwareScanRequestDto());
            }
        }

        return malwareScanResponseDto;
    }
}
