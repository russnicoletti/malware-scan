package com.symphony.malware.scan.metrics;

import com.codahale.metrics.Meter;
import com.codahale.metrics.Timer;

/**
 * Defines the contract for Malware Scanning metrics.
 *
 * @author Andrey Zavizionov on 2020-01-22
 */
public interface MalwareScanningMetrics {
  /**
   * @return meter for the successfully submitted requests count, if all processors finished normally.
   */
  Meter countOfSuccessfulRequests();

  /**
   * @return meter for the count of requests that failed to be submitted, if sending a request to symproxy fails
   */
  Meter countOfFailedToSubmitRequests();

  /**
   * @return meter for the fail during validation count, if MalwareScanRequest validation fails
   */
  Meter countOfFailValidationRequests();

  /**
   * @return meter for the fail during state creation count,
   * if persistence call to the data store for PENDING state fails
   */
  Meter countOfFailCreateState();

  /**
   * @return meter for the fail during update of the state count,
   * if persistence call to the data store for SUBMITTED state fails,
   */
  Meter countOfFailUpdateState();

  /**
   * @return meter for the count of requests that failed to be submitter and
   * were successfully submitted after retry.
   */
  Meter countOfSuccessfulOnRetryRequests();

  /**
   * @return meter for the count of requests that failed to be submitted
   * after exhausting the retry limit.
   */
  Meter countOfFailedToSubmitAfterRetryExhaustedRequest();

  /**
   * @return timer to track time between the initial submission fail
   * and following successful submission.
   */
  Timer timeBetweenInitialFailedRequestAndSuccessfulRetry();

  /**
   * @return timer to track time between the request submission to Symproxy
   * and receiving response from Symproxy
   */
  Timer timeBetweenSubmittingRequestAndGettingResponseFromSymproxy();

  /**
   * @return timer to track time between the request submission to Symproxy
   * and receiving scanning response from Malware Scanner
   */
  Timer timeBetweenSubmittingRequestAndGettingResponseFromScanner();

  /**
   * @return timer for end-to-end taken for performing Malware Scan processing
   */
  Timer timeEndToEndTakenForMalwareScan();
}

