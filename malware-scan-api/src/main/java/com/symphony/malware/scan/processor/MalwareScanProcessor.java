package com.symphony.malware.scan.processor;

import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public abstract class MalwareScanProcessor implements Processor<MalwareScanRequestDto, MalwareScanResponseDto> {

    private Processor<MalwareScanRequestDto, MalwareScanResponseDto> processor;

    @Override
    public Processor<MalwareScanRequestDto, MalwareScanResponseDto> setNext(final Processor<MalwareScanRequestDto, MalwareScanResponseDto> processor) {
        this.processor = processor;
        return this;
    }

    @Override
    public Processor<MalwareScanRequestDto, MalwareScanResponseDto> getNext(
        final MalwareScanResponseDto malwareScanResponseDto
    ) {
        if (processor == null) {
            // If there is not next processor, return response from the previous one
            return new Processor<MalwareScanRequestDto, MalwareScanResponseDto>() {
                @Override
                public MalwareScanResponseDto process(final MalwareScanRequestDto malwareScanRequestDto) {
                    LOGGER.info("Finish processing malware scan request {}", malwareScanResponseDto);
                    return malwareScanResponseDto;
                }

                @Override
                public Processor<MalwareScanRequestDto, MalwareScanResponseDto> setNext(final Processor<MalwareScanRequestDto, MalwareScanResponseDto> processor) {
                    return null;
                }

                @Override
                public Processor<MalwareScanRequestDto, MalwareScanResponseDto> getNext(final MalwareScanResponseDto malwareScanResponseDto) {
                    return null;
                }
            };
        } else {
            return processor;
        }
    }

    /**
     * Build chain of {@link Processor}'s for malware scan request processing
     * Processors should be passed in order in which those need to be executed
     * @param firstProcessor first processor
     * @param processors array of processors
     * @return starting {@link Processor} in the chain of processor
     */
    public static Processor<MalwareScanRequestDto, MalwareScanResponseDto> build(
        final Processor<MalwareScanRequestDto, MalwareScanResponseDto> firstProcessor,
        final Processor<MalwareScanRequestDto, MalwareScanResponseDto>... processors
    ) {
        if (processors.length == 0) {
            return firstProcessor;
        }

        // Set next for each processor
        Processor<MalwareScanRequestDto, MalwareScanResponseDto> lastProcessor = firstProcessor;
        for (Processor<MalwareScanRequestDto, MalwareScanResponseDto> processor : processors) {
            lastProcessor.setNext(processor);
            lastProcessor = processor;
        }

        return firstProcessor;
    }

}
