package com.symphony.malware.scan.processor;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.persistence.exception.MalwareScanStatusTransferException;
import com.symphony.malware.scan.service.MalwareScanOperationPersistenceService;

import lombok.extern.slf4j.Slf4j;

/**
 * Updates existing malware scan file state with status SUBMITTED
 */
@Slf4j
public class UpdateStateMalwareScanProcessor implements Processor<MalwareScanRequestDto, MalwareScanResponseDto> {

    private final MalwareScanOperationPersistenceService malwareScanOperationPersistenceService;

    public UpdateStateMalwareScanProcessor(
        final MalwareScanOperationPersistenceService malwareScanOperationPersistenceService
    ) {
        this.malwareScanOperationPersistenceService = malwareScanOperationPersistenceService;
    }

    @Override
    public MalwareScanResponseDto process(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        /*
         * Please mind the fact, that persistence might fail here (e.g. due to storage unavailability),
         * but we ignore it, as it is not critical if status will not transfer from PENDING to SUBMITTED at this point,
         * but we should handle this case, when response from Malware Scanner is received
         */
        LOGGER.info("Set malware scan state to SUBMITTED for malware scan request {}", malwareScanRequestDto);

        try {
            return malwareScanOperationPersistenceService.update(malwareScanRequestDto, MalwareScanFileState.Status.SUBMITTED, Actor.SYMPHONY)
                .toBuilder().malwareScanRequestDto(malwareScanRequestDto).build();
        } catch (MalwareScanStatusTransferException e) {
            /*
             * Log a warning message here, as we can hit a case when system is trying to update status from OK/BAD to SUBMITTED
             * Which is not allowed, but at this point is not considered a critical exception, so we can return successful response back
             */
            LOGGER.warn(e.getMessage() + " for the attachment {} with stream id {} and message id {}",
                malwareScanRequestDto.getAttachmentMetaDto(), malwareScanRequestDto.getStreamId(), malwareScanRequestDto.getMessageId());
            return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.SUCCESS)
                .error("").malwareScanRequestDto(malwareScanRequestDto).build();
        }
        catch (PersistentException e) {
            LOGGER.error("Error updating {}. Exception: {}", malwareScanRequestDto.getAttachmentMetaDto().getFileId(), e);
            throw new MalwareScanException(e);
        }
    }
}
