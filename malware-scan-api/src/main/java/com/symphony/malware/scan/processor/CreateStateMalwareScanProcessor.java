package com.symphony.malware.scan.processor;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.service.MalwareScanOperationPersistenceService;

import lombok.extern.slf4j.Slf4j;

/**
 * Inserts initial malware scan file state with status PENDING
 */
@Slf4j
public class CreateStateMalwareScanProcessor implements Processor<MalwareScanRequestDto, MalwareScanResponseDto> {

    private final MalwareScanOperationPersistenceService malwareScanOperationPersistenceService;

    public CreateStateMalwareScanProcessor(
        final MalwareScanOperationPersistenceService malwareScanOperationPersistenceService
    ) {
        this.malwareScanOperationPersistenceService = malwareScanOperationPersistenceService;
    }

    @Override
    public MalwareScanResponseDto process(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        try {
            return malwareScanOperationPersistenceService.create(malwareScanRequestDto)
                    .toBuilder().malwareScanRequestDto(malwareScanRequestDto).build();
        } catch (PersistentException e) {
            LOGGER.error("Error creating initial state for {}. Exception: {}", malwareScanRequestDto.getAttachmentMetaDto().getFileId(), e);

            // 'processors' throw MalwareScanException to keep interface clean
            throw new MalwareScanException(e);
        }
    }
}
