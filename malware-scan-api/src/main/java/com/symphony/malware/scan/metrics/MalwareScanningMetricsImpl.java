package com.symphony.malware.scan.metrics;

import com.codahale.metrics.Meter;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Timer;

/**
 * Provides metrics for Malware Scanning flow.
 * @author Andrey Zavizionov on 2020-01-27
 */
public class MalwareScanningMetricsImpl implements MalwareScanningMetrics {
  private final MalwareScanningMetricReport metricReport;

  public MalwareScanningMetricsImpl(MalwareScanningMetricReport metricReport) {
    this.metricReport = metricReport;
  }

  @Override
  public Meter countOfSuccessfulRequests() {
    return meter("MalwareScan.Request.Successful.Count");
  }

  @Override
  public Meter countOfFailedToSubmitRequests() {
    return meter("MalwareScan.Request.Failed.Submit.Count");
  }

  @Override
  public Meter countOfFailValidationRequests() {
    return meter("MalwareScan.Request.Failed.Validation.Count");
  }

  @Override
  public Meter countOfFailCreateState() {
    return meter("MalwareScan.Request.Failed.CreateState.Count");
  }

  @Override
  public Meter countOfFailUpdateState() {
    return meter("MalwareScan.Request.Failed.UpdateState.Count");
  }

  @Override
  public Meter countOfSuccessfulOnRetryRequests() {
    return meter("MalwareScan.Request.SuccessfulOnRetry.Count");
  }

  @Override
  public Meter countOfFailedToSubmitAfterRetryExhaustedRequest() {
    return meter("MalwareScan.Request.FailedOnRetryExhausted.Count");
  }

  @Override
  public Timer timeBetweenInitialFailedRequestAndSuccessfulRetry() {
    return timer("MalwareScan.Request.FromFailedToSuccessfulRetry.Time");
  }

  @Override
  public Timer timeBetweenSubmittingRequestAndGettingResponseFromSymproxy() {
    return timer("MalwareScan.Request.SymproxyResponse.Time");
  }

  @Override
  public Timer timeBetweenSubmittingRequestAndGettingResponseFromScanner() {
    return timer("MalwareScan.Request.ScannerResponse.Time");
  }

  private Meter meter(String metricName) {
    return getRegistry().meter(metricName);
  }

  private Timer timer(String metricName) {
    return getRegistry().timer(metricName);
  }

  private MetricRegistry getRegistry() {
    return metricReport.getRegistry();
  }
}
