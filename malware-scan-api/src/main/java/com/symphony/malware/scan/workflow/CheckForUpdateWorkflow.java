package com.symphony.malware.scan.workflow;

import com.symphony.malware.scan.model.MalwareScanFileState;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class CheckForUpdateWorkflow {
    private static final Logger LOGGER = LoggerFactory.getLogger(CheckForUpdateWorkflow.class);

    /**
     * @param malwareScanFileState
     * @return true if the specified malwareScanFileState record is in a final state.
     * false otherwise.
     */
    static boolean inFinalState(final MalwareScanFileState malwareScanFileState) {

        // Determine if the file is in a final state
        MalwareScanFileState.Status status = malwareScanFileState.getStatus();
        LOGGER.info("Status for file {} is {}", malwareScanFileState.getFileId(), status);

        if (status == MalwareScanFileState.Status.BAD           ||
            status == MalwareScanFileState.Status.OK            ||
            status == MalwareScanFileState.Status.UNSCANNABLE   ||
            status == MalwareScanFileState.Status.EXPIRED       ||
            status == MalwareScanFileState.Status.FAILED_SUBMIT ||
            status == MalwareScanFileState.Status.FAILED_UPDATE) {

            LOGGER.info("File {} is in a final state, (don't retry this request)", malwareScanFileState.getFileId());
            return true;
        } else {
            LOGGER.info("File {} is not in a final state, (retry this request)", malwareScanFileState.getFileId());
            return false;
        }
    }
}
