package com.symphony.malware.scan.workflow;

import com.google.common.base.Preconditions;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.metrics.MalwareScanningMetrics;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.persistence.exception.MalwareScanStatusTransferException;
import com.symphony.malware.scan.persistence.service.MalwareScanPersistenceService;
import com.symphony.malware.scan.service.MalwareScanOperationPersistenceService;
import com.symphony.malware.scan.service.MalwareScanOperationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;

class MalwareScanSubmissionWorkflowHelper {
    private final MalwareScanOperationService malwareScanOperationService;
    private final MalwareScanPersistenceService malwareScanPersistenceService;
    private final MalwareScanOperationPersistenceService malwareScanOperationPersistenceService;
    private final MalwareScanStatusPublisher malwareScanStatusPublisher;
    private final MalwareScanningMetrics malwareScanningMetrics;

    private static final Logger LOGGER = LoggerFactory.getLogger(MalwareScanSubmissionWorkflowHelper.class);

    MalwareScanSubmissionWorkflowHelper(MalwareScanOperationService malwareScanOperationService,
                                        MalwareScanPersistenceService malwareScanPersistenceService,
                                        MalwareScanOperationPersistenceService malwareScanOperationPersistenceService,
                                        MalwareScanStatusPublisher malwareScanStatusPublisher,
                                        MalwareScanningMetrics malwareScanningMetrics) {

        this.malwareScanOperationService = malwareScanOperationService;
        this.malwareScanPersistenceService = malwareScanPersistenceService;
        this.malwareScanOperationPersistenceService = malwareScanOperationPersistenceService;
        this.malwareScanStatusPublisher = malwareScanStatusPublisher;
        this.malwareScanningMetrics = malwareScanningMetrics;
    }

    MalwareScanningMetrics getMalwareScanningMetrics() {
        return this.malwareScanningMetrics;
    }

    MalwareScanResponseDto scan(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        MalwareScanResponseDto malwareScanResponseDto = malwareScanOperationService.scan(malwareScanRequestDto);
        LOGGER.info("Response from initial scan submission: {}", malwareScanResponseDto.getStatus());
        return malwareScanResponseDto;
    }

    MalwareScanResponseDto retryScan(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        MalwareScanResponseDto malwareScanResponseDto = malwareScanOperationService.retryScan(malwareScanRequestDto);
        LOGGER.info("Response from retrying scan submission: {}", malwareScanResponseDto.getStatus());
        return malwareScanResponseDto;
    }

    Optional<MalwareScanFileState> getState(String fileId) throws PersistentException {
        return malwareScanPersistenceService.getMalwareScanFileState(fileId);
    }

    /**
     * Used when the maximum retry duration has been exceeded for a MalwareScanRequest to set the state of the
     * corresponding file to a final, failed state.
     * If the file has not been submitted (that state is PENDING) the final state is FAILED_SUBMIT.
     * If the file has been submitted and was not updated by the scanner (that state is SUBMITTED) the final state is FAILED_UPDATE.
     * @param malwareScanRequestDto
     * @param status
     */
    void handleGiveUpRetry(MalwareScanRequestDto malwareScanRequestDto, MalwareScanFileState.Status status) throws
            MalwareScanException, MalwareScanStatusPublisherException, PersistentException
    {
        Preconditions.checkArgument(status == MalwareScanFileState.Status.PENDING || status == MalwareScanFileState.Status.SUBMITTED);

        LOGGER.info("Stop retrying file {}", malwareScanRequestDto.getAttachmentMetaDto().getFileId());

        if (status == MalwareScanFileState.Status.PENDING) {
            malwareScanningMetrics.countOfFailedToSubmitAfterRetryExhausted().mark();
            updateToFinalState(malwareScanRequestDto, MalwareScanFileState.Status.FAILED_SUBMIT);
        } else {
            malwareScanningMetrics.countOfFailedToUpdateAfterRetryExhausted().mark();
            updateToFinalState(malwareScanRequestDto, MalwareScanFileState.Status.FAILED_UPDATE);
        }
    }

    /**
     * Updates a malwareScanRequest object to the specified state and publishes
     * the updated status.
     * @param malwareScanRequestDto
     * @param status
     */
    void updateToFinalState(MalwareScanRequestDto malwareScanRequestDto, MalwareScanFileState.Status status) throws
            MalwareScanException, MalwareScanStatusPublisherException, PersistentException
    {
        String fileId = malwareScanRequestDto.getAttachmentMetaDto().getFileId();
        try {
            malwareScanOperationPersistenceService.update(malwareScanRequestDto, status, Actor.SYMPHONY);
            LOGGER.info("Set state to {} for {}", status, fileId);

            // Since the MalwareScan persistence layer updates some values from the MalwareScanFileState
            // object before saving it (like some timestamps, version, etc) the state needs to be
            // loaded again in order to publish the correct values.
            Optional<MalwareScanFileState> updatedFileState =
                    malwareScanPersistenceService.getMalwareScanFileState(fileId);
            malwareScanStatusPublisher.publish(updatedFileState.get());
            LOGGER.info("published status {} for {}", status, fileId);

        } catch (MalwareScanStatusTransferException   |
                MalwareScanStatusPublisherException  |
                PersistentException e) {
            LOGGER.error("Unable to set the state for {} to {} due to {}",
                    fileId, status, e.getLocalizedMessage());

            // Let the caller decide what to do
            throw e;
        }
    }
}
