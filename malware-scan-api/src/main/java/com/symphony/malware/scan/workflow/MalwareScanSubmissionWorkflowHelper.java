package com.symphony.malware.scan.workflow;

import com.google.common.base.Preconditions;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.metrics.MalwareScanningMetrics;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.persistence.exception.MalwareScanStatusTransferException;
import com.symphony.malware.scan.persistence.service.MalwareScanPersistenceService;
import com.symphony.malware.scan.service.MalwareScanOperationPersistenceService;
import com.symphony.malware.scan.service.MalwareScanOperationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Optional;

class MalwareScanSubmissionWorkflowHelper {
    private final MalwareScanOperationService malwareScanOperationService;
    private final MalwareScanPersistenceService malwareScanPersistenceService;
    private final MalwareScanOperationPersistenceService malwareScanOperationPersistenceService;
    private final MalwareScanStatusPublisher malwareScanStatusPublisher;
    private final MalwareScanningMetrics malwareScanningMetrics;

    private static final Logger LOGGER = LoggerFactory.getLogger(MalwareScanSubmissionWorkflowHelper.class);
    private static final String INITAL_SCAN_OPERATION_ACTION = "initial-scan";
    private static final String RETRY_SCAN_OPERATION_ACTION = "retry-scan";

    MalwareScanSubmissionWorkflowHelper(MalwareScanOperationService malwareScanOperationService,
                                        MalwareScanPersistenceService malwareScanPersistenceService,
                                        MalwareScanOperationPersistenceService malwareScanOperationPersistenceService,
                                        MalwareScanStatusPublisher malwareScanStatusPublisher,
                                        MalwareScanningMetrics malwareScanningMetrics) {

        this.malwareScanOperationService = malwareScanOperationService;
        this.malwareScanPersistenceService = malwareScanPersistenceService;
        this.malwareScanOperationPersistenceService = malwareScanOperationPersistenceService;
        this.malwareScanStatusPublisher = malwareScanStatusPublisher;
        this.malwareScanningMetrics = malwareScanningMetrics;
    }

    MalwareScanningMetrics getMalwareScanningMetrics() {
        return this.malwareScanningMetrics;
    }

    MalwareScanResponseDto scan(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        LOGGER.info("Submitting fileId {} with messageId {}",
            malwareScanRequestDto.getAttachmentMetaDto().getFileId(), malwareScanRequestDto.getMessageId());

        MalwareScanResponseDto malwareScanResponseDto = malwareScanOperationService.scan(malwareScanRequestDto);
        logScanResult(INITAL_SCAN_OPERATION_ACTION, malwareScanResponseDto);
        return malwareScanResponseDto;
    }

    MalwareScanResponseDto retryScan(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        LOGGER.info("Re-submitting fileId {} with messageId {}",
            malwareScanRequestDto.getAttachmentMetaDto().getFileId(), malwareScanRequestDto.getMessageId());

        MalwareScanResponseDto malwareScanResponseDto = malwareScanOperationService.retryScan(malwareScanRequestDto);
        logScanResult(RETRY_SCAN_OPERATION_ACTION, malwareScanResponseDto);
        return malwareScanResponseDto;
    }

    private void logScanResult(String operation, MalwareScanResponseDto malwareScanResponseDto) {
        if (malwareScanResponseDto.getStatus() == MalwareScanResponseDto.Status.SUCCESS) {
            LOGGER.info("Response from {} submission for {}: {}",
                    operation,
                    malwareScanResponseDto.getMalwareScanRequestDto().getAttachmentMetaDto().getFileId(),
                    malwareScanResponseDto.getStatus());
        } else {
            LOGGER.warn("Response from {} submission for {}: {} {}",
                    operation,
                    malwareScanResponseDto.getMalwareScanRequestDto().getAttachmentMetaDto().getFileId(),
                    malwareScanResponseDto.getStatus(),
                    malwareScanResponseDto.getErrorCode());
        }
    }

    Optional<MalwareScanFileState> getState(String fileId) throws PersistentException {
        return malwareScanPersistenceService.getMalwareScanFileState(fileId);
    }

    /**
     * Used when the maximum retry duration has been exceeded for a MalwareScanRequest to set the state of the
     * corresponding file to a final, failed state.
     * If the file has not been submitted (that state is PENDING) the final state is FAILED_SUBMIT.
     * If the file has been submitted and was not updated by the scanner (that state is SUBMITTED) the final state is FAILED_UPDATE.
     * @param malwareScanRequestDto
     * @param status
     */
    void handleGiveUpRetry(MalwareScanRequestDto malwareScanRequestDto, MalwareScanFileState.Status status) throws
            MalwareScanException, MalwareScanStatusPublisherException, PersistentException
    {
        Preconditions.checkArgument(status == MalwareScanFileState.Status.PENDING || status == MalwareScanFileState.Status.SUBMITTED);

        LOGGER.info("Maximum retry duration exceeded, stop retrying file {}", malwareScanRequestDto.getAttachmentMetaDto().getFileId());

        if (status == MalwareScanFileState.Status.PENDING) {
            malwareScanningMetrics.countOfFailedToSubmitAfterRetryExhausted().mark();
            updateToFinalState(malwareScanRequestDto, MalwareScanFileState.Status.FAILED_SUBMIT);
        } else {
            malwareScanningMetrics.countOfFailedToUpdateAfterRetryExhausted().mark();
            updateToFinalState(malwareScanRequestDto, MalwareScanFileState.Status.FAILED_UPDATE);
        }
    }

    /**
     * Updates a malwareScanRequest object to the specified state and publishes
     * the updated status.
     * @param malwareScanRequestDto
     * @param status
     */
    void updateToFinalState(MalwareScanRequestDto malwareScanRequestDto, MalwareScanFileState.Status status) throws
            MalwareScanException, MalwareScanStatusPublisherException, PersistentException
    {
        String fileId = malwareScanRequestDto.getAttachmentMetaDto().getFileId();
        try {
            malwareScanOperationPersistenceService.update(malwareScanRequestDto, status, Actor.SYMPHONY);
            LOGGER.info("Set state to {} for {}", status, fileId);

            // Since the MalwareScan persistence layer updates some values from the MalwareScanFileState
            // object before saving it (like some timestamps, version, etc) the state needs to be
            // loaded again in order to publish the correct values.
            Optional<MalwareScanFileState> updatedFileState =
                    malwareScanPersistenceService.getMalwareScanFileState(fileId);
            malwareScanStatusPublisher.publish(updatedFileState.get());
            LOGGER.info("published status {} for {}", status, fileId);

        } catch (MalwareScanStatusTransferException   |
                MalwareScanStatusPublisherException  |
                PersistentException e) {
            LOGGER.error("Unable to set the state for {} to {} due to {}",
                    fileId, status, e.getLocalizedMessage());

            // Let the caller decide what to do
            throw e;
        }
    }

    /**
     * Used when the malware-scan workflow is processing a request for a message
     * with an attachment that has already been processed as part of a request
     * with a different message.
     *
     * For example, a message with an attachment is sent as a blast to multiple streams.
     * Each message (for each recipient stream) will be unique but will contain the same
     * attachment (same fileId). The malware scan request that is processed first will be
     * submitted to symproxy. Subsequent malware-scan requests with the same attachment
     * will be skipped (will not be submitted to symproxy) because the attachment will
     * have already been submitted.
     *
     * For each request that is 'skipped', the context (messageId, streamId) will be
     * added to the MalwareScanFileMapping table so that when the malware-scan update
     * maestro event is sent, it will be sent to all the streams to which the messages
     * were sent.
     *
     * If the malware-scan state of the attachment is already in a final state, the
     * state is published as part of this method. This is to ensure a malware-scan
     * update event is sent to all the contexts in which messages with the attachment
     * appears even in the scenario where the scanner updates the malware-scan status
     * before the workflow processes all the requests corresponding to messages containing
     * the same attachment.
     * @param malwareScanRequestDto
     * @throws PersistentException
     * @throws MalwareScanStatusPublisherException
     */
    void handleMessageFromAnotherRequest(MalwareScanRequestDto malwareScanRequestDto) throws PersistentException, MalwareScanStatusPublisherException {
        LOGGER.info("Added mapping for fileId: {}, messageId: {}", malwareScanRequestDto.getAttachmentMetaDto().getFileId(), malwareScanRequestDto.getMessageId());
        malwareScanOperationPersistenceService.insertMapping(malwareScanRequestDto);

        // Get the state in order to publish it
        String fileId = malwareScanRequestDto.getAttachmentMetaDto().getFileId();
        Optional<MalwareScanFileState> fileStateOptional =
            malwareScanPersistenceService.getMalwareScanFileState(fileId);

        if (!fileStateOptional.isPresent()) {
            throw new IllegalArgumentException("There is no MalwareScanFileState record for fileId " + fileId);
        }

        // Publish the status if the malware-scan state is a final state
        MalwareScanFileState fileState = fileStateOptional.get();
        if (fileState.getStatus() == MalwareScanFileState.Status.PENDING || fileState.getStatus() == MalwareScanFileState.Status.SUBMITTED) {
            return;
        }

        try {
            malwareScanStatusPublisher.publish(fileState);
            LOGGER.info("Published malware-scan state {} for fileId: {}, messageId: {}", fileState.getStatus(), fileId, malwareScanRequestDto.getMessageId());
        } catch (MalwareScanStatusPublisherException e) {
            LOGGER.error("Unable to publish malware-scan status for fileId {} due to {}",
                malwareScanRequestDto.getAttachmentMetaDto().getFileId(), e.getLocalizedMessage());

            // Let the caller decide what to do
            throw e;
        }
    }
}
