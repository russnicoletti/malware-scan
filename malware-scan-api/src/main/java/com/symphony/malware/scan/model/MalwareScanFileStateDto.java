package com.symphony.malware.scan.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;

/**
 * DTO containing malware scan file status details
 *
 * @author anton.g
 */
public class MalwareScanFileStateDto {

   /**
    * Source of the malware scan status
    */
   public enum Source {

      @JsonProperty("Symphony")
      SYMPHONY,

      @JsonProperty("Customer")
      CUSTOMER;

      public static Source fromActor(Actor actor) {
         if (actor == Actor.SYMPHONY) {
            return SYMPHONY;
         } else if (actor == Actor.MALWARE_SCANNER) {
            return CUSTOMER;
         } else {
            throw new IllegalArgumentException("Unexpected malware actor value received: " + actor);
         }
      }
   }

   /**
    * Malware scan state
    */
   private final String scanningState;

   /**
    * Timestamp denoting when this state was set
    */
   private final Long timestamp;

   /**
    * Source of the malware scan status
    */
   private final Source source;

   public MalwareScanFileStateDto(String scanningState, Long timestamp, Source source) {
      this.scanningState = scanningState;
      this.timestamp = timestamp;
      this.source = source;
   }

   public String getScanningState() {
      return scanningState;
   }

   public Long getTimestamp() {
      return timestamp;
   }

   public Source getSource() {
      return source;
   }

   @Override
   public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      MalwareScanFileStateDto that = (MalwareScanFileStateDto) o;
      return Objects.equals(scanningState, that.scanningState) &&
              Objects.equals(timestamp, that.timestamp) &&
              source == that.source;
   }

   @Override
   public int hashCode() {
      return Objects.hash(scanningState, timestamp, source);
   }
}
