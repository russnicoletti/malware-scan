package com.symphony.malware.scan.service;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.MalwareScanFileMapping;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.model.Sender;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.persistence.exception.MalwareScanStatusTransferException;
import com.symphony.malware.scan.persistence.service.MalwareScanPersistenceService;

import lombok.extern.slf4j.Slf4j;

/**
 * Creates and updates entries in the persistence layer when malware scan operation is requested
 */
@Slf4j
public class MalwareScanOperationPersistenceService {

    private final MalwareScanPersistenceService malwareScanPersistenceService;

    public MalwareScanOperationPersistenceService(
        final MalwareScanPersistenceService malwareScanPersistenceService
    ) {
        this.malwareScanPersistenceService = malwareScanPersistenceService;
    }

    /**
     * Creates a new MalwareScanFileState in Pending status if there isn't one for the given
     * request.
     * Creates the entry on behalf of the Actor.SYMPHONY
     * @param malwareScanRequestDto the request which contains the details for the State
     * @return a response DTO with SUCCESS status if the state was created or PROCESSING if there
     * was already a state. FAIL_CREATE_STATE if there is an exception calling the persistence service.
     */
    public MalwareScanResponseDto create(MalwareScanRequestDto malwareScanRequestDto) {

        final MalwareScanFileState pendingMSFileState = MalwareScanFileState.builder()
            .fileId(malwareScanRequestDto.getAttachmentMetaDto().getFileId())
            .status(MalwareScanFileState.Status.PENDING)
            .contentType(malwareScanRequestDto.getAttachmentMetaDto().getContentType())
            .originalStreamId(malwareScanRequestDto.getStreamId())
            .originalMessageId(malwareScanRequestDto.getMessageId())
            .build();

        try {
            MalwareScanFileState existentState = malwareScanPersistenceService
                .putIfAbsent(pendingMSFileState, Actor.SYMPHONY);

            // No matter if the MalwareScanFileState was already present or not, the mapping
            // is updated for every processed MalwareScanRequest object.
            // It can happen that in Blast scenarios, another thread already updated the state
            // but this one has to update the mapping.
            insertMapping(malwareScanRequestDto);

            if (existentState == null) {
                LOGGER.info("Success to create malware scan information for the attachment {} with stream id {} and message id {}",
                    malwareScanRequestDto.getAttachmentMetaDto(), malwareScanRequestDto.getStreamId(),
                    malwareScanRequestDto.getMessageId());
                return MalwareScanResponseDto.builder()
                    .status(MalwareScanResponseDto.Status.SUCCESS).error("").build();
            } else {
                LOGGER.info("Found already existing malware scan information with status {} for the "
                    + "attachment with fileId {}", existentState.getStatus(), existentState.getFileId());
                return MalwareScanResponseDto.builder()
                    .status(MalwareScanResponseDto.Status.STATE_PRESENT).error("").build();
            }
        } catch (PersistentException | MalwareScanException e) {
            String errorMsg = String.format("Failed to create malware scan information for the "
                + "attachment %s with stream id %s and message id %s",
                malwareScanRequestDto.getAttachmentMetaDto(), malwareScanRequestDto.getStreamId(),
                malwareScanRequestDto.getMessageId());
            LOGGER.error(errorMsg, e);
            return MalwareScanResponseDto.builder()
                .status(MalwareScanResponseDto.Status.FAIL_CREATE_STATE)
                .error(errorMsg + System.lineSeparator() + e.getLocalizedMessage()).build();
        }
    }

    private void insertMapping(final MalwareScanRequestDto malwareScanRequestDto)
        throws PersistentException {
        final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder()
            .fileId(malwareScanRequestDto.getAttachmentMetaDto().getFileId())
            .streamId(malwareScanRequestDto.getStreamId())
            .messageId(malwareScanRequestDto.getMessageId())
            .streamName(malwareScanRequestDto.getStreamName())
            .streamType(malwareScanRequestDto.getStreamType())
            .sender(java.util.Optional.ofNullable(malwareScanRequestDto.getUser())
                .map(user -> Sender.builder()
                    .id(user.getUserId())
                    .email(user.getEmail())
                    .build())
                .orElse(null)
            ).build();

        malwareScanPersistenceService.putMalwareScanFileMapping(malwareScanFileMapping);
    }

    /**
     * Update an entry in the malware scan file state table with the result of RLP call
     * @param malwareScanRequestDto {@link MalwareScanRequestDto} to store
     * @param status {@link MalwareScanFileState.Status} status to persist
     * @param actor {@link Actor} who performed status change
     * @return object which indicates whether information was stored successfully
     */
    public MalwareScanResponseDto update(
        final MalwareScanRequestDto malwareScanRequestDto, final MalwareScanFileState.Status status, final Actor actor
    ) throws MalwareScanStatusTransferException {
        try {
            final MalwareScanFileState malwareScanFileState = malwareScanPersistenceService.getMalwareScanFileState(malwareScanRequestDto.getAttachmentMetaDto().getFileId())
                .orElseThrow(() -> new MalwareScanException("Existing malware scan state information was not found for file id "
                    + malwareScanRequestDto.getAttachmentMetaDto().getFileId())).toBuilder().status(status).build();

            malwareScanPersistenceService.putMalwareScanFileState(malwareScanFileState, actor);
        } catch (MalwareScanStatusTransferException msste) {
            // Let caller decide what to do, if status transfer fails
            throw msste;
        } catch (PersistentException | MalwareScanException e) {
            final String error = "Failed to update malware scan information for the attachment " + malwareScanRequestDto.getAttachmentMetaDto()
                + " with stream id " + malwareScanRequestDto.getStreamId() + " and message id " + malwareScanRequestDto.getMessageId();
            LOGGER.error(error, e);

            return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.FAIL_UPDATE_STATE)
                .error(error + System.lineSeparator() + e.getLocalizedMessage()).build();
        }

        LOGGER.info("Success to update malware scan information for the attachment {} with stream id {} and message id {}",
            malwareScanRequestDto.getAttachmentMetaDto(), malwareScanRequestDto.getStreamId(), malwareScanRequestDto.getMessageId());
        return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.SUCCESS).error("").build();
    }
}
