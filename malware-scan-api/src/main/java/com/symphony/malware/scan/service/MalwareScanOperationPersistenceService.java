package com.symphony.malware.scan.service;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.MalwareScanFileMapping;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.model.Sender;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.persistence.exception.MalwareScanStatusTransferException;
import com.symphony.malware.scan.persistence.service.MalwareScanPersistenceService;

import lombok.extern.slf4j.Slf4j;

/**
 * Creates and updates entries in the persistence layer when malware scan operation is requested
 */
@Slf4j
public class MalwareScanOperationPersistenceService {

    private final MalwareScanPersistenceService malwareScanPersistenceService;

    public MalwareScanOperationPersistenceService(
        final MalwareScanPersistenceService malwareScanPersistenceService
    ) {
        this.malwareScanPersistenceService = malwareScanPersistenceService;
    }

    /**
     * Create an initial entries in malware scan file state and malware scan file mapping tables
     * Initially we store malware scan state in PENDING status
     * @param malwareScanRequestDto {@link MalwareScanRequestDto} to store
     * @param status {@link MalwareScanFileState.Status} status to persist
     * @param actor {@link Actor} who performed status change
     * @return object which indicates whether information was stored successfully
     */
    public MalwareScanResponseDto create(
        final MalwareScanRequestDto malwareScanRequestDto, final MalwareScanFileState.Status status, final Actor actor
    ) throws MalwareScanStatusTransferException {
        try {
            final MalwareScanFileState malwareScanFileState = MalwareScanFileState.builder()
                .fileId(malwareScanRequestDto.getAttachmentMetaDto().getFileId())
                .status(status)
                .contentType(malwareScanRequestDto.getAttachmentMetaDto().getContentType())
                .originalStreamId(malwareScanRequestDto.getStreamId())
                .originalMessageId(malwareScanRequestDto.getMessageId())
                .build();

            final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder()
                .fileId(malwareScanRequestDto.getAttachmentMetaDto().getFileId())
                .streamId(malwareScanRequestDto.getStreamId())
                .messageId(malwareScanRequestDto.getMessageId())
                .streamName(malwareScanRequestDto.getStreamName())
                .streamType(malwareScanRequestDto.getStreamType())
                .sender(java.util.Optional.ofNullable(malwareScanRequestDto.getUser())
                    .map(user -> Sender.builder()
                        .id(user.getUserId())
                        .email(user.getEmail())
                        .build())
                    .orElse(null)
                ).build();

            malwareScanPersistenceService.putMalwareScanFileMapping(malwareScanFileMapping);
            malwareScanPersistenceService.putMalwareScanFileState(malwareScanFileState, actor);
        } catch (MalwareScanStatusTransferException msste) {
            // Let caller decide what to do, if status transfer fails
            throw msste;
        } catch (PersistentException | MalwareScanException e) {
            final String error = "Failed to create malware scan information for the attachment " + malwareScanRequestDto.getAttachmentMetaDto()
                + " with stream id " + malwareScanRequestDto.getStreamId() + " and message id " + malwareScanRequestDto.getMessageId();
            LOGGER.error(error, e);

            return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.FAIL_CREATE_STATE)
                .error(error + System.lineSeparator() + e.getLocalizedMessage()).build();
        }

        LOGGER.info("Success to create malware scan information for the attachment {} with stream id {} and message id {}",
            malwareScanRequestDto.getAttachmentMetaDto(), malwareScanRequestDto.getStreamId(), malwareScanRequestDto.getMessageId());
        return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.SUCCESS).error("").build();
    }

    /**
     * Update an entry in the malware scan file state table with the result of RLP call
     * @param malwareScanRequestDto {@link MalwareScanRequestDto} to store
     * @param status {@link MalwareScanFileState.Status} status to persist
     * @param actor {@link Actor} who performed status change
     * @return object which indicates whether information was stored successfully
     */
    public MalwareScanResponseDto update(
        final MalwareScanRequestDto malwareScanRequestDto, final MalwareScanFileState.Status status, final Actor actor
    ) throws MalwareScanStatusTransferException {
        try {
            final MalwareScanFileState malwareScanFileState = malwareScanPersistenceService.getMalwareScanFileState(malwareScanRequestDto.getAttachmentMetaDto().getFileId())
                .orElseThrow(() -> new MalwareScanException("Existing malware scan state information was not found for file id "
                    + malwareScanRequestDto.getAttachmentMetaDto().getFileId())).toBuilder().status(status).build();

            malwareScanPersistenceService.putMalwareScanFileState(malwareScanFileState, actor);
        } catch (MalwareScanStatusTransferException msste) {
            // Let caller decide what to do, if status transfer fails
            throw msste;
        } catch (PersistentException | MalwareScanException e) {
            final String error = "Failed to update malware scan information for the attachment " + malwareScanRequestDto.getAttachmentMetaDto()
                + " with stream id " + malwareScanRequestDto.getStreamId() + " and message id " + malwareScanRequestDto.getMessageId();
            LOGGER.error(error, e);

            return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.FAIL_UPDATE_STATE)
                .error(error + System.lineSeparator() + e.getLocalizedMessage()).build();
        }

        LOGGER.info("Success to update malware scan information for the attachment {} with stream id {} and message id {}",
            malwareScanRequestDto.getAttachmentMetaDto(), malwareScanRequestDto.getStreamId(), malwareScanRequestDto.getMessageId());
        return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.SUCCESS).error("").build();
    }
}
