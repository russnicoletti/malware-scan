package com.symphony.malware.scan.metrics;

import com.symphony.metrics.reporter.SymphonyCloudReporter;

import com.codahale.metrics.JmxReporter;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Reporter;
import com.codahale.metrics.Slf4jReporter;
import lombok.extern.slf4j.Slf4j;

import java.util.concurrent.TimeUnit;

/**
 * Reports Malware Scanning metrics.
 *
 * @author Andrey Zavizionov on 2020-01-28
 */
@Slf4j
public class MalwareScanningMetricReport {
  private static final int REPORT_PERIOD = 1;
  private static final String PRINCIPAL = "MALWARE-SCANNING";
  private static final String PRINCIPAL_VERSION = "1.0";
  private static final String ENABLE_JMX_REPORTER = "com.symphony.contentexport.enableJMXReporter";
  private static final Boolean enableJMXReporter = Boolean.parseBoolean(System.getProperty(ENABLE_JMX_REPORTER, "true"));
  private final MetricRegistry registry;
  private SymphonyCloudReporter cloudReporter;
  private Slf4jReporter slf4jReporter;
  private Reporter reporter;

  /**
   * @param instanceId instance ID associated with reported metrics
   */
  public MalwareScanningMetricReport(String instanceId) {
    this.registry = new MetricRegistry();
    startReport(instanceId);
  }

  void startReport(String instanceId) {
    if(enableJMXReporter) {
      LOGGER.info("JMX Reporter has been enabled.");
      reporter = JmxReporter.forRegistry(registry).build();
      ((JmxReporter) reporter).start();
    } else {
      cloudReporter = SymphonyCloudReporter
          .forRegistry(registry, PRINCIPAL, PRINCIPAL_VERSION)
          .withInstanceId(instanceId)
          .build();
      cloudReporter.start(REPORT_PERIOD, TimeUnit.MINUTES);

      slf4jReporter = Slf4jReporter
          .forRegistry(registry)
          .withLoggingLevel(Slf4jReporter.LoggingLevel.INFO)
          .outputTo(LOGGER)
          .build();
      slf4jReporter.start(REPORT_PERIOD, TimeUnit.MINUTES);
    }
  }

  public MetricRegistry getRegistry() {
    return registry;
  }

  SymphonyCloudReporter getCloudReporter() {
    return cloudReporter;
  }
}
