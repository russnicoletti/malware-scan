package com.symphony.malware.scan.metrics;

import com.symphony.metrics.reporter.SymphonyCloudReporter;

import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Slf4jReporter;
import lombok.extern.slf4j.Slf4j;

import java.util.concurrent.TimeUnit;

/**
 * Reports Malware Scanning metrics.
 *
 * @author Andrey Zavizionov on 2020-01-28
 */
@Slf4j
public class MalwareScanningMetricReport {
  private static final int REPORT_PERIOD = 1;
  private static final String PRINCIPAL = "MALWARE-SCANNING";
  private static final String PRINCIPAL_VERSION = "1.0";
  private final MetricRegistry registry;
  private SymphonyCloudReporter cloudReporter;
  private Slf4jReporter slf4jReporter;

  /**
   * @param instanceId instance ID associated with reported metrics
   */
  public MalwareScanningMetricReport(String instanceId) {
    this.registry = new MetricRegistry();
    startReport(instanceId);
  }

  void startReport(String instanceId) {
    cloudReporter = SymphonyCloudReporter
        .forRegistry(registry, PRINCIPAL, PRINCIPAL_VERSION)
        .withInstanceId(instanceId)
        .build();
    cloudReporter.start(REPORT_PERIOD, TimeUnit.MINUTES);

    slf4jReporter = Slf4jReporter
        .forRegistry(registry)
        .withLoggingLevel(Slf4jReporter.LoggingLevel.INFO)
        .outputTo(LOGGER)
        .build();
    slf4jReporter.start(REPORT_PERIOD, TimeUnit.MINUTES);
  }

  public MetricRegistry getRegistry() {
    return registry;
  }

  SymphonyCloudReporter getCloudReporter() {
    return cloudReporter;
  }
}
