package com.symphony.malware.scan.converter;

import com.symphony.malware.scan.MalwareScanResponse;
import com.symphony.malware.scan.Status;
import com.symphony.malware.scan.model.MalwareScanResponseDto;

import com.google.common.collect.ImmutableMap;

import java.util.Map;

public class MalwareScanResponseProtoDtoConverter implements ProtoDtoConverter<MalwareScanResponse, MalwareScanResponseDto> {

    /**
     * Mapping of statuses returned from Symproxy to SBE recognizable statuses
     */
    private static final Map<Status, MalwareScanResponseDto.Status> TO_DTO_STATUS_MAPPING = ImmutableMap.of(
        Status.OK, MalwareScanResponseDto.Status.SUCCESS,
        Status.FAILED, MalwareScanResponseDto.Status.FAIL_SEND_REQUEST
    );

    /**
     * Mapping of SBE recognizable statuses to statuses returned from Symproxy
     */
    private static final Map<MalwareScanResponseDto.Status, Status> TO_PROTO_STATUS_MAPPING = ImmutableMap.of(
        MalwareScanResponseDto.Status.FAIL_VALIDATION, Status.FAILED,
        MalwareScanResponseDto.Status.FAIL_CREATE_STATE, Status.FAILED,
        MalwareScanResponseDto.Status.FAIL_SEND_REQUEST, Status.FAILED,
        MalwareScanResponseDto.Status.FAIL_UPDATE_STATE, Status.FAILED,
        MalwareScanResponseDto.Status.SUCCESS, Status.OK
    );

    @Override
    public MalwareScanResponseDto toDto(final MalwareScanResponse malwareScanResponse) {
        return MalwareScanResponseDto.builder()
            .status(TO_DTO_STATUS_MAPPING.get(malwareScanResponse.getStatus()))
            .error(malwareScanResponse.getError())
            .errorCode(malwareScanResponse.getErrorCode())
            .traceId(malwareScanResponse.getTraceId())
            .build();
    }

    @Override
    public MalwareScanResponse toProto(final MalwareScanResponseDto malwareScanResponseDto) {
        throw new UnsupportedOperationException("Conversion of MalwareScanResponseDto -> MalwareScanResponse isn't supported.");
    }
}
