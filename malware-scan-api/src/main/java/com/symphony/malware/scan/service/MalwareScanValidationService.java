package com.symphony.malware.scan.service;

import com.symphony.malware.scan.metrics.MalwareScanningMetrics;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;

import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import lombok.extern.slf4j.Slf4j;

import java.util.Set;
import java.util.stream.Collectors;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;

@Slf4j
public class MalwareScanValidationService {

    private final Validator validator;
    private final MalwareScanningMetrics malwareScanMetrics;

    public MalwareScanValidationService(final MalwareScanningMetrics malwareScanMetrics) {
        this.malwareScanMetrics = malwareScanMetrics;
        this.validator = Validation.buildDefaultValidatorFactory().getValidator();
    }

    public MalwareScanResponseDto validate(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        final Set<ConstraintViolation<MalwareScanRequestDto>> constraintViolations = validator.validate(malwareScanRequestDto);

        if (constraintViolations.isEmpty()) {
            return MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.SUCCESS).error("").build();
        }
        final String error = constraintViolations.stream().map(cv -> cv.getPropertyPath() + " " + cv.getMessage()).collect(Collectors.joining(System.lineSeparator()));
        String errorMessage = "Error encountered " + error + " while validating malware scan request " + malwareScanRequestDto;
        LOGGER.error(errorMessage);

        malwareScanMetrics.countOfFailValidationRequests().mark();
        throw new MalwareScanException(errorMessage);
    }
}
