package com.symphony.malware.scan.processor;

import com.symphony.container.connector.ContainerRpcController;
import com.symphony.malware.scan.MalwareScanRequest;
import com.symphony.malware.scan.MalwareScanResponse;
import com.symphony.malware.scan.MalwareScanService;
import com.symphony.malware.scan.converter.ProtoDtoConverter;
import com.symphony.malware.scan.metrics.MalwareScanningMetrics;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.proto.MalwareScanServiceProtobufFactory;
import com.symphony.proto3110.ServiceException;

import com.codahale.metrics.Timer;
import lombok.extern.slf4j.Slf4j;

/**
 * Sends malware scan request to the Symproxy
 */
@Slf4j
public class SendRequestMalwareScanProcessor implements Processor<MalwareScanRequestDto, MalwareScanResponseDto> {
    private final ProtoDtoConverter<MalwareScanRequest, MalwareScanRequestDto> malwareScanRequestProtoDtoConverter;
    private final ProtoDtoConverter<MalwareScanResponse, MalwareScanResponseDto> malwareScanResponseProtoDtoConverter;
  private final MalwareScanningMetrics malwareScanMetrics;
  private final MalwareScanServiceProtobufFactory malwareScanServiceProtobufFactory;

  public SendRequestMalwareScanProcessor(
      final MalwareScanServiceProtobufFactory malwareScanServiceProtobufFactory,
      final ProtoDtoConverter<MalwareScanRequest, MalwareScanRequestDto> malwareScanRequestProtoDtoConverter,
      final ProtoDtoConverter<MalwareScanResponse, MalwareScanResponseDto> malwareScanResponseProtoDtoConverter,
      final MalwareScanningMetrics malwareScanMetrics) {
        this.malwareScanServiceProtobufFactory = malwareScanServiceProtobufFactory;
        this.malwareScanRequestProtoDtoConverter = malwareScanRequestProtoDtoConverter;
        this.malwareScanResponseProtoDtoConverter = malwareScanResponseProtoDtoConverter;
        this.malwareScanMetrics = malwareScanMetrics;
  }

    @Override
    public MalwareScanResponseDto process(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        LOGGER.info("Submit malware scan request {}", malwareScanRequestDto);
        return sendMalwareScanRequest(malwareScanRequestDto)
            .toBuilder()
            .malwareScanRequestDto(malwareScanRequestDto)
            .build();
    }

    /**
     * Sends a malware scan request
     * @param malwareScanRequestDto {@link MalwareScanRequestDto}
     * @return {@link MalwareScanResponseDto}
     */
    private MalwareScanResponseDto sendMalwareScanRequest(final MalwareScanRequestDto malwareScanRequestDto) throws MalwareScanException {
        LOGGER.info("Submit malware scan request {}", malwareScanRequestDto);

        MalwareScanResponseDto responseDto;
        try {
            final MalwareScanRequest malwareScanRequest =
                malwareScanRequestProtoDtoConverter.toProto(malwareScanRequestDto);
            LOGGER.info("Sending malware scan request for attachment with id {}",
                malwareScanRequest.getAttachmentMeta().getFileId());
            final MalwareScanResponse malwareScanResponse = sendRLPRequest(malwareScanRequest);
            LOGGER.info("Received malware scan response for attachment with id {}",
                malwareScanRequest.getAttachmentMeta().getFileId());

            responseDto = malwareScanResponseProtoDtoConverter.toDto(malwareScanResponse);

            recordResponseMetrics(responseDto);

        } catch (ServiceException e) {
            LOGGER.error("Failed to send malware scan request {}. Exception: {}", malwareScanRequestDto, e);

            malwareScanMetrics.countOfFailedToSubmitRequests().mark();

            throw new MalwareScanException(e);
        }

        return responseDto;
    }

    private void recordResponseMetrics(final MalwareScanResponseDto malwareScanResponseDto) {
        if (malwareScanResponseDto.getStatus() == MalwareScanResponseDto.Status.SUCCESS){
            malwareScanMetrics.countOfSuccessfulRequests().mark();
        } else {
            malwareScanMetrics.countOfFailedToSubmitRequests().mark();
        }
    }

  /**
     * Sends a request to the symproxy for malware scanning
     * @param malwareScanRequest {@link MalwareScanRequest}
     * @return {@link MalwareScanResponse}
     * @throws ServiceException
     */
    private MalwareScanResponse sendRLPRequest(final MalwareScanRequest malwareScanRequest) throws ServiceException {
        MalwareScanService.BlockingInterface symproxyMalware =
            malwareScanServiceProtobufFactory.newBlockingStub();

      MalwareScanResponse malwareScanResponse;

      Timer.Context requestTimer = malwareScanMetrics
          .timeBetweenSubmittingRequestAndGettingResponseFromSymproxy().time();
      try {

        malwareScanResponse =
            symproxyMalware.submitForScanning(new ContainerRpcController(), malwareScanRequest);

      } finally {
        requestTimer.stop();
      }

      return malwareScanResponse;
    }
}
