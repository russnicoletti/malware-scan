package com.symphony.malware.scan.service;

import static com.symphony.malware.scan.Status.FAILED;
import static com.symphony.malware.scan.Status.OK;

import com.symphony.dlp.efsymproxyconnector.ConnectionIdUsageScenario;
import com.symphony.dlp.efsymproxyconnector.ContainerConnector;
import com.symphony.dlp.efsymproxyconnector.ContainerRpcController;
import com.symphony.dlp.efsymproxyconnector.RLPBlockingRpcChannel;
import com.symphony.dlp.efsymproxyconnector.connectorconfig.ConnectionRequestType;
import com.symphony.dlp.efsymproxyconnector.connectorconfig.ContainerConnectorConfiguration;
import com.symphony.dlp.efsymproxyconnector.metric.SymproxMetricReportCache;
import com.symphony.malware.scan.AttachmentData;
import com.symphony.malware.scan.MalwareScanRequest;
import com.symphony.malware.scan.MalwareScanResponse;
import com.symphony.malware.scan.dto.Actor;
import com.symphony.malware.scan.dto.MalwareScanMapping;
import com.symphony.malware.scan.dto.MalwareScanState;
import com.symphony.malware.scan.model.Attachment;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.persistence.service.MalwarePersistenceService;
import com.symphony.proto320.ServiceException;
import com.symphony.remoteservice.longpoll.client.RLPUsageScenario;

import com.google.common.base.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

/**
 * Malware scanning operations
 * Created by sergii.oliinyk
 */
public class MalwareScanOperationImpl implements MalwareScanOperation {
  private static final Logger LOGGER = LoggerFactory.getLogger(MalwareScanOperationImpl.class);

  private final ContainerConnector containerConnector;
  private final SymproxMetricReportCache symproxMetricReportCache;
  private final ContainerConnectorConfiguration containerConnectorConfiguration;
  private final MalwarePersistenceService malwarePersistenceService;

  public MalwareScanOperationImpl(
      final ContainerConnector containerConnector,
      final SymproxMetricReportCache symproxMetricReportCache,
      final ContainerConnectorConfiguration containerConnectorConfiguration,
      final MalwarePersistenceService malwarePersistenceService
  ) {
    this.containerConnector = containerConnector;
    this.symproxMetricReportCache = symproxMetricReportCache;
    this.containerConnectorConfiguration = containerConnectorConfiguration;
    this.malwarePersistenceService = malwarePersistenceService;
  }

  /**
   * Builds and sends a request to symproxy for malware scanning for each attachment respectively
   * @param malwareScanRequestDto
   * @return List<MalwareScanResponse>
   */
  @Override
  public List<MalwareScanResponse> scan(final MalwareScanRequestDto malwareScanRequestDto) {
    MalwareScanRequest malwareScanRequest = getMalwareScanRequest(malwareScanRequestDto);
    List<MalwareScanResponse> malwareScanRespons = new ArrayList<>();
    for (Attachment attachment : malwareScanRequestDto.getAttachments()) {
      malwareScanRespons.add(sendMalwareScanResponse(malwareScanRequest, getAttachmentMeta(attachment)));

      // TODO Make sure that we retry here
      malwarePersistenceService.putMalwareScanState(MalwareScanState.builder().build(), Actor.MALWARE_SCANNER);
      malwarePersistenceService.putMalwareScanMapping(MalwareScanMapping.builder().fileId(attachment.getFileId())
          .streamId(malwareScanRequestDto.getThreadId()).messageId(Long.toString(malwareScanRequest.getMessageId()))
          .streamName(malwareScanRequestDto.getStreamName()).streamType(malwareScanRequestDto.getStreamType())
          .sendingPod(Integer.toString(malwareScanRequestDto.getFromPod())).sender(null).build());
    }
    return malwareScanRespons;
  }

  /**
   * Sends a request per attachment in social message
   * @param malwareScanRequest, attachmentMeta
   * @return List<MalwareScanResponse>
   */
  private MalwareScanResponse sendMalwareScanResponse(MalwareScanRequest malwareScanRequest, AttachmentData.AttachmentMeta attachmentMeta) {
    MalwareScanResponse response;
    malwareScanRequest = malwareScanRequest.toBuilder().setAttachmentMeta(attachmentMeta).build();
    try {
      LOGGER.info("Sending request for malware scanning: " + malwareScanRequest);
      response = sendRLPRequest(malwareScanRequest);
      response = response.toBuilder().setStatus(OK).build();
    } catch (ServiceException e) {
      response = MalwareScanResponse.newBuilder()
          .setStatus(FAILED)
          .setError(e.getLocalizedMessage())
          .build();
      String errMsg = String.format(
          "Failed to send the attachment %s for MalWare scanning with stream id %s",
          malwareScanRequest.getAttachmentMeta(),
          malwareScanRequest.getStreamId());
      LOGGER.error(errMsg, e);
    }
    LOGGER.info("Got response from malware scanning: " + response);
    return response;
  }

  /**
   * Creates a message level context for each attachment in a message
   * @param malwareScanDTO
   * @return MalwareScanRequest
   */
  private MalwareScanRequest getMalwareScanRequest(MalwareScanRequestDto malwareScanDTO) {
    MalwareScanRequest.Builder malwareRequest = MalwareScanRequest.newBuilder();
    malwareRequest.setMessageId(malwareScanDTO.getUniqueMessageId());
    malwareRequest.setCreationTime(malwareScanDTO.getActualIngestionDate());
    malwareRequest.setStreamId(malwareScanDTO.getThreadId());
    return malwareRequest.build();
  }

  /**
   * Creates an attachment meta
   * @param attachment
   * @return Sender
   */
  private AttachmentData.AttachmentMeta getAttachmentMeta(Attachment attachment) {
    return AttachmentData.AttachmentMeta.newBuilder()
        .setName(attachment.getName())
        .setFileId(attachment.getFileId())
        .setContentType(attachment.getContentType())
        .setCreatorId(attachment.getCreatorId())
        .setSizeInBytes(attachment.getSizeInBytes())
        .build();
  }

  /**
   * Sends a request to the random symproxy for malware scanning
   * @param request
   * @return
   * @throws ServiceException
   */
  private MalwareScanResponse sendRLPRequest(MalwareScanRequest request) throws
      ServiceException {
    //create the rpc channel using specified connectionId
    RLPBlockingRpcChannel rpcChannel = new RLPBlockingRpcChannel(
        ConnectionIdUsageScenario.VALID,
        RLPUsageScenario.USE_RLP_SERVICE,
        containerConnector, symproxMetricReportCache,
        Optional.absent(), Optional.absent(),
        containerConnectorConfiguration, ConnectionRequestType.TEXT_ONLY);
    com.symphony.malware.scan.MalwareScanService.BlockingInterface symproxyMalWare =
        com.symphony.malware.scan.MalwareScanService.newBlockingStub(rpcChannel);
    return symproxyMalWare.performScanning(new ContainerRpcController(), request);
  }

}
