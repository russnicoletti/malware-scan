package com.symphony.malware.scan.converter;

import com.symphony.malware.scan.AttachmentData;
import com.symphony.malware.scan.MalwareScanRequest;
import com.symphony.malware.scan.model.AttachmentMetaDto;
import com.symphony.malware.scan.model.MalwareScanRequestDto;

public class MalwareScanRequestProtoDtoConverter implements ProtoDtoConverter<MalwareScanRequest, MalwareScanRequestDto> {

    private final ProtoDtoConverter<AttachmentData.AttachmentMeta, AttachmentMetaDto> attachmentMetaProtoDtoConverter;

    public MalwareScanRequestProtoDtoConverter(
        final ProtoDtoConverter<AttachmentData.AttachmentMeta, AttachmentMetaDto> attachmentMetaProtoDtoConverter
    ) {
        this.attachmentMetaProtoDtoConverter = attachmentMetaProtoDtoConverter;
    }

    /**
     * Does not convert attachment metadata
     * @param malwareScanRequest
     * @return
     */
    @Override
    public MalwareScanRequestDto toDto(final MalwareScanRequest malwareScanRequest) {
        return MalwareScanRequestDto.builder()
            .encryptionType(malwareScanRequest.getEncryptionType())
            .wrappedContentKey(malwareScanRequest.getWrappedContentKey())
            .wrappedFileKey(malwareScanRequest.getWrappedFileKey())
            .attachmentMetaDto(attachmentMetaProtoDtoConverter.toDto(malwareScanRequest.getAttachmentMeta()))
            .traceId(malwareScanRequest.getTraceId())
            .build();
    }

    /**
     * Does not convert attachment metadata
     * @param malwareScanRequestDto
     * @return
     */
    @Override
    public MalwareScanRequest toProto(final MalwareScanRequestDto malwareScanRequestDto) {
        return MalwareScanRequest.newBuilder()
            .setEncryptionType(malwareScanRequestDto.getEncryptionType())
            .setAttachmentMeta(attachmentMetaProtoDtoConverter.toProto(malwareScanRequestDto.getAttachmentMetaDto()))
            .setWrappedContentKey(malwareScanRequestDto.getWrappedContentKey())
            .setWrappedFileKey(malwareScanRequestDto.getWrappedFileKey())
            .setTraceId(malwareScanRequestDto.getTraceId())
            .build();
    }

}
