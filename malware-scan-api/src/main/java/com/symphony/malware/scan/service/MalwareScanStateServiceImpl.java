package com.symphony.malware.scan.service;

import com.symphony.clouds.api.storage.v1.FileMetaData;
import com.symphony.data.mapper.PersistentException;
import com.symphony.exceptions.service.InternalServiceException;
import com.symphony.malware.scan.exception.MalwareScanFileNotFoundException;
import com.symphony.malware.scan.model.FileInfoDto;
import com.symphony.malware.scan.model.MalwareScanFileMapping;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.model.MalwareScanFileStateDto;
import com.symphony.malware.scan.model.MalwareScanFileStatesHistoryDto;
import com.symphony.malware.scan.model.MessageDetailsDto;
import com.symphony.malware.scan.persistence.service.MalwareScanPersistenceService;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Service for dealing with malware scan file states
 *
 * @author anton.g
 */
@Slf4j
public class MalwareScanStateServiceImpl implements MalwareScanStateService {

   private final MalwareScanPersistenceService malwareScanPersistenceService;
   private final AttachmentFileService attachmentFileService;

   public MalwareScanStateServiceImpl(MalwareScanPersistenceService malwareScanPersistenceService, AttachmentFileService attachmentFileService) {
      this.attachmentFileService = attachmentFileService;
      this.malwareScanPersistenceService = malwareScanPersistenceService;
   }

   @Override
   public MalwareScanFileStatesHistoryDto getMalwareAttachmentStatesHistory(String fileId) throws MalwareScanFileNotFoundException {
      try {
         LOGGER.info("Retrieving malware scan states history for file with id {}", fileId);
         List<MalwareScanFileState> malwareScanFileStates = malwareScanPersistenceService.getMalwareScanFileStates(fileId);
         if (malwareScanFileStates == null || malwareScanFileStates.isEmpty()) {
            throw new MalwareScanFileNotFoundException("No malware scan history found for file " + fileId);
         }

         List<MalwareScanFileMapping> malwareScanFileMappings = malwareScanPersistenceService.getMalwareScanFileMappings(fileId);
         if (malwareScanFileMappings.isEmpty()) {
            throw new InternalServiceException("No malware scan file mappings found for file " + fileId, null);
         }

         FileInfoDto fileInfo = createFileInfo(fileId);

         List<MalwareScanFileStateDto> scanStates = malwareScanFileStates
                 .stream()
                 .map(this::convertToMalwareScanState)
                 .collect(Collectors.toList());

         List<MessageDetailsDto> conversationDetails = malwareScanFileMappings
                 .stream()
                 .map(this::convertToMessageDetails)
                 .collect(Collectors.toList());

         return new MalwareScanFileStatesHistoryDto(fileInfo, scanStates, conversationDetails);
      } catch (PersistentException e) {
         String errorMsg = "Error while retrieving malware scan states history from database";
         LOGGER.error(errorMsg, e);
         throw new InternalServiceException(errorMsg, e);
      }
   }

   private FileInfoDto createFileInfo(String fileId) {
      FileMetaData fileMetaData = attachmentFileService
              .getFileMetadata(fileId)
              .orElseThrow(() -> new InternalServiceException("No metadata found file with id " + fileId, null));

      return new FileInfoDto(fileMetaData.getName(), fileId, fileMetaData.getSizeInBytes());
   }

   private MessageDetailsDto convertToMessageDetails(MalwareScanFileMapping scanFileMapping) {
      return new MessageDetailsDto(
              scanFileMapping.getStreamId(),
              scanFileMapping.getStreamName(),
              scanFileMapping.getStreamType(),
              scanFileMapping.getMessageId(),
              scanFileMapping.getSender().getEmail()
      );
   }

   private MalwareScanFileStateDto convertToMalwareScanState(MalwareScanFileState malwareScanFileState) {
      return new MalwareScanFileStateDto(
              malwareScanFileState.getStatus().toString(),
              malwareScanFileState.getCreateTimestamp().toEpochMilli(),
              MalwareScanFileStateDto.Source.fromActor(malwareScanFileState.getLastUpdatedBy())
      );
   }

}
