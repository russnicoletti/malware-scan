package com.symphony.malware.scan.proto;

import com.symphony.container.connector.ConnectionIdUsageScenario;
import com.symphony.container.connector.ContainerConnector;
import com.symphony.container.connector.GenericRLPBlockingRpcChannel;
import com.symphony.container.connector.config.ConnectionRequestType;
import com.symphony.container.connector.config.ContainerConnectorConfiguration;
import com.symphony.container.connector.metric.SymproxMetricReportCache;
import com.symphony.malware.scan.MalwareScanService;
import com.symphony.proto320.BlockingRpcChannel;
import com.symphony.remoteservice.longpoll.client.RLPService;
import com.symphony.remoteservice.longpoll.client.RLPUsageScenario;

import com.google.common.base.Optional;

/**
 * @author Andrey Zavizionov on 2020-01-27
 */
public class MalwareScanServiceProtobufFactoryImpl implements MalwareScanServiceProtobufFactory {

  private static final String MALWARE_SCAN_RLP_SERVICE_NAME = "scanAttachmentForMalwareService";


  private final ContainerConnector containerConnector;
  private final SymproxMetricReportCache symproxMetricReportCache;
  private final ContainerConnectorConfiguration containerConnectorConfiguration;

  public MalwareScanServiceProtobufFactoryImpl(
      final ContainerConnector containerConnector,
      final SymproxMetricReportCache symproxMetricReportCache,
      final ContainerConnectorConfiguration containerConnectorConfiguration) {
    this.containerConnector = containerConnector;
    this.symproxMetricReportCache = symproxMetricReportCache;
    this.containerConnectorConfiguration = containerConnectorConfiguration;
  }

  @Override
  public MalwareScanService.BlockingInterface newBlockingStub() {
    final BlockingRpcChannel blockingRpcChannel = createRpcChannel();

    return MalwareScanService.newBlockingStub(blockingRpcChannel);
  }

  private BlockingRpcChannel createRpcChannel() {
    return new GenericRLPBlockingRpcChannel(
        ConnectionIdUsageScenario.NOT_APPLICABLE, RLPUsageScenario.USE_RLP_SERVICE,
        containerConnector,
        symproxMetricReportCache, Optional.of(new RLPService(MALWARE_SCAN_RLP_SERVICE_NAME)),
        Optional.absent(),
        containerConnectorConfiguration, ConnectionRequestType.MALWARE_SCAN);
  }
}
