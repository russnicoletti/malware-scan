package com.symphony.malware.scan.proto;

import static com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfigProvider.ConnectionRequestType;

import com.symphony.container.connector.ConnectionIdUsageScenario;
import com.symphony.container.connector.metric.SymproxMetricReportCache;
import com.symphony.malware.scan.MalwareScanService;
import com.symphony.malware.scan.connector.MalwareScanContainerConnector;
import com.symphony.malware.scan.connector.MalwareScanRlpBlockingRpcChannel;
import com.symphony.malware.scan.connector.MalwareScanRlpCallExecutor;
import com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfigProvider;
import com.symphony.proto3110.BlockingRpcChannel;
import com.symphony.remoteservice.longpoll.client.RLPService;
import com.symphony.remoteservice.longpoll.client.RLPUsageScenario;

/**
 * @author Andrey Zavizionov on 2020-01-27
 */
public class MalwareScanServiceProtobufFactoryImpl implements MalwareScanServiceProtobufFactory {

  private static final String MALWARE_SCAN_RLP_SERVICE_NAME = "scanAttachmentForMalwareService";

  private final MalwareScanContainerConnector malwareScanContainerConnector;
  private final SymproxMetricReportCache symproxMetricReportCache;
  private final MalwareScanRlpCallExecutor malwareScanRlpCallExecutor;
  private final MalwareScanContainerConnectorConfigProvider malwareScanContainerConnectorConfigProvider;

  public MalwareScanServiceProtobufFactoryImpl(
      final MalwareScanContainerConnector malwareScanContainerConnector,
      final SymproxMetricReportCache symproxMetricReportCache,
      final MalwareScanRlpCallExecutor malwareScanRlpCallExecutor,
      final MalwareScanContainerConnectorConfigProvider malwareScanContainerConnectorConfigProvider
  ) {
    this.malwareScanContainerConnector = malwareScanContainerConnector;
    this.symproxMetricReportCache = symproxMetricReportCache;
    this.malwareScanRlpCallExecutor = malwareScanRlpCallExecutor;
    this.malwareScanContainerConnectorConfigProvider = malwareScanContainerConnectorConfigProvider;
  }

  @Override
  public MalwareScanService.BlockingInterface newBlockingStub() {
    final BlockingRpcChannel blockingRpcChannel = createRpcChannel();

    return MalwareScanService.newBlockingStub(blockingRpcChannel);
  }

  private BlockingRpcChannel createRpcChannel() {
    return new MalwareScanRlpBlockingRpcChannel(
        ConnectionIdUsageScenario.NOT_APPLICABLE, RLPUsageScenario.USE_RLP_SERVICE,
        malwareScanContainerConnector, symproxMetricReportCache,
        new RLPService(MALWARE_SCAN_RLP_SERVICE_NAME), null,
        malwareScanRlpCallExecutor, malwareScanContainerConnectorConfigProvider,
        ConnectionRequestType.MALWARE_SCAN);
  }
}
