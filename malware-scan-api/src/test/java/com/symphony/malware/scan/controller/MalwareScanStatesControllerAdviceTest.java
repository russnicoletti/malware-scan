package com.symphony.malware.scan.controller;

import com.symphony.exceptions.service.ForbiddenRequestException;
import com.symphony.malware.scan.exception.MalwareScanFileNotFoundException;
import com.symphony.webcommons.rest.ErrorResponse;
import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.UUID;

import static org.junit.Assert.assertEquals;

/**
 * @author anton.g
 */
public class MalwareScanStatesControllerAdviceTest {

   private MalwareScanStatesControllerAdvice advice;

   @Before
   public void before() {
      advice = new MalwareScanStatesControllerAdvice();
   }

   @Test
   public void handleMalwareScanFileNotFoundException() {
      String fileId = "1";
      MalwareScanFileNotFoundException e = new MalwareScanFileNotFoundException(fileId);

      ResponseEntity<ErrorResponse> errorResponseResponseEntity = advice.handleMalwareScanFileNotFoundException(e);

      assertEquals(HttpStatus.NOT_FOUND, errorResponseResponseEntity.getStatusCode());
      ErrorResponse body = errorResponseResponseEntity.getBody();
      assertEquals("Malware scan states history not found for file " + fileId, body.getMessage());
   }

   @Test
   public void handleForbiddenRequestException() {
      String errorMsg = UUID.randomUUID().toString();
      ForbiddenRequestException e = new ForbiddenRequestException(errorMsg);

      ResponseEntity<ErrorResponse> errorResponseResponseEntity = advice.handleForbiddenRequestException(e);

      assertEquals(HttpStatus.FORBIDDEN, errorResponseResponseEntity.getStatusCode());

      ErrorResponse body = errorResponseResponseEntity.getBody();
      assertEquals("Not entitled to access resource: endpoint entitlement check failed", body.getMessage());
   }

   @Test
   public void handleDefaultException() {
      String errorMsg = UUID.randomUUID().toString();
      Exception e = new Exception(errorMsg);

      ResponseEntity<ErrorResponse> errorResponseResponseEntity = advice.handleDefaultException(e);

      assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, errorResponseResponseEntity.getStatusCode());

      ErrorResponse body = errorResponseResponseEntity.getBody();
      assertEquals(errorMsg, body.getMessage());
   }

}