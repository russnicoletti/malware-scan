package com.symphony.malware.scan.workflow;

import util.TimestampMillisSupplier;

import java.util.Date;

import static org.mockito.Mockito.when;

public class RetryingDecisionHelper {

    private final MalwareScanSubmissionWorkflowConfig malwareScanSubmissionWorkflowConfig;
    private final TimestampMillisSupplier timestampMillisSupplier;
    private final Integer SECONDS_BEFORE_NOW = 100;
    private final Long NOW_MILLIS;
    private final Long createTimestamp;

    public RetryingDecisionHelper(MalwareScanSubmissionWorkflowConfig malwareScanSubmissionWorkflowConfig,
                                  TimestampMillisSupplier timestampMillisSupplier) {
        this.malwareScanSubmissionWorkflowConfig = malwareScanSubmissionWorkflowConfig;
        this.timestampMillisSupplier = timestampMillisSupplier;

        NOW_MILLIS = new Date().getTime();
        when(timestampMillisSupplier.now()).thenReturn(NOW_MILLIS);
        createTimestamp = timestampMillisSupplier.now() - (SECONDS_BEFORE_NOW * 1000);
    }

    public Long setupRetryDurationExceeded(boolean retryDurationExceeded) {

        if (retryDurationExceeded) {
            // The time between the initial attempt (createTimestamp) and "now" is more than the maximum retry duration
            when(malwareScanSubmissionWorkflowConfig.getMaxRetryDurationSeconds()).thenReturn(SECONDS_BEFORE_NOW - 1);
        } else {
            // The time between the initial attempt (createTimestamp) and "now" is less than the maximum retry duration
            when(malwareScanSubmissionWorkflowConfig.getMaxRetryDurationSeconds()).thenReturn(SECONDS_BEFORE_NOW + 1);
        }

        return createTimestamp;
    }

    public Long setupShouldRetryNotSubmitted(boolean shouldRetry) {

        // Retry duration should not be exceeded if the scenario is "should retry"
        setupRetryDurationExceeded(!shouldRetry);
        if (shouldRetry) {
            // The last submission attempt plus the retry interval is greater than "now"
            when(malwareScanSubmissionWorkflowConfig.getResubmitNotSubmittedIntervalSeconds()).thenReturn(SECONDS_BEFORE_NOW - 1);
        } else {
            // The last submission attempt plus the retry interval is less than "now"
            when(malwareScanSubmissionWorkflowConfig.getResubmitNotSubmittedIntervalSeconds()).thenReturn(SECONDS_BEFORE_NOW + 1);
        }
        return createTimestamp;
    }

    public Long setupShouldRetrySubmitted(boolean shouldRetry) {

        // Retry duration should not be exceeded if the scenario is "should retry"
        setupRetryDurationExceeded(!shouldRetry);
        if (shouldRetry) {
            // The last submission attempt plus the retry interval is greater than "now"
            when(malwareScanSubmissionWorkflowConfig.getResubmitSubmittedIntervalSeconds()).thenReturn(SECONDS_BEFORE_NOW - 1);
        } else {
            // The last submission attempt plus the retry interval is less than "now"
            when(malwareScanSubmissionWorkflowConfig.getResubmitSubmittedIntervalSeconds()).thenReturn(SECONDS_BEFORE_NOW + 1);
        }
       return createTimestamp;
    }
}
