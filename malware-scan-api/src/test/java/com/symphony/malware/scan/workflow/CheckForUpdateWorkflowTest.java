package com.symphony.malware.scan.workflow;

import com.symphony.malware.scan.model.MalwareScanFileState;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import util.TimestampMillisSupplier;


import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class CheckForUpdateWorkflowTest {

    @Test
    public void testCheckForFinalStateUpdate() throws Exception {
        TimestampMillisSupplier timestampMillisSupplier = new TimestampMillisSupplier();
        Long now = timestampMillisSupplier.now();
        String messageId = "messageId";

        assertTrue(CheckForUpdateWorkflow.inFinalState(MalwareScanWorflowTestHelper.createMalwareScanFileState(
                now, messageId, MalwareScanFileState.Status.BAD).get()));

        assertTrue(CheckForUpdateWorkflow.inFinalState(MalwareScanWorflowTestHelper.createMalwareScanFileState(
                now, messageId, MalwareScanFileState.Status.OK).get()));

        assertTrue(CheckForUpdateWorkflow.inFinalState(MalwareScanWorflowTestHelper.createMalwareScanFileState(
                now, messageId, MalwareScanFileState.Status.UNSCANNABLE).get()));

        assertTrue(CheckForUpdateWorkflow.inFinalState(MalwareScanWorflowTestHelper.createMalwareScanFileState(
                now, messageId, MalwareScanFileState.Status.EXPIRED).get()));

        assertTrue(CheckForUpdateWorkflow.inFinalState(MalwareScanWorflowTestHelper.createMalwareScanFileState(
                now, messageId, MalwareScanFileState.Status.FAILED_SUBMIT).get()));

        assertTrue(CheckForUpdateWorkflow.inFinalState(MalwareScanWorflowTestHelper.createMalwareScanFileState(
                now, messageId, MalwareScanFileState.Status.FAILED_UPDATE).get()));
    }
}