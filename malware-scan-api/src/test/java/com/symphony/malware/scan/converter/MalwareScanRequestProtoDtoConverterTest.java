package com.symphony.malware.scan.converter;

import static org.assertj.core.api.Assertions.assertThat;

import com.symphony.malware.scan.AttachmentData;
import com.symphony.malware.scan.MalwareScanRequest;
import com.symphony.malware.scan.model.AttachmentMetaDto;
import com.symphony.malware.scan.model.MalwareScanRequestDto;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanRequestProtoDtoConverterTest {

    private static final String NAME = "name";
    private static final String FILE_ID = "fileId";
    private static final String CONTENT_TYPE = "contentType";

    private static final String WRAPPED_CONTENT_KEY = "wrapped-content-key";
    private static final String WRAPPED_FILE_KEY = "wrapped-file-key";

    private ProtoDtoConverter<AttachmentData.AttachmentMeta, AttachmentMetaDto> attachmentMetaProtoDtoConverter;

    private MalwareScanRequestProtoDtoConverter malwareScanRequestProtoDtoConverter;

    @Before
    public void before() {
        this.attachmentMetaProtoDtoConverter = new AttachmentMetaProtoDtoConverter();
        this.malwareScanRequestProtoDtoConverter = new MalwareScanRequestProtoDtoConverter(attachmentMetaProtoDtoConverter);
    }

    @Test
    public void toDto_protoIsNotNull_converted() {
        final MalwareScanRequest malwareScanRequest = MalwareScanRequest.newBuilder()
            .setEncryptionType(MalwareScanRequest.EncryptionType.UNKNOWN)
            .setWrappedContentKey(WRAPPED_CONTENT_KEY)
            .setWrappedFileKey(WRAPPED_FILE_KEY)
            .setAttachmentMeta(AttachmentData.AttachmentMeta.newBuilder().setName(NAME).setFileId(FILE_ID).setContentType(CONTENT_TYPE).build())
            .build();

        final MalwareScanRequestDto malwareScanRequestDto = malwareScanRequestProtoDtoConverter.toDto(malwareScanRequest);

        assertThat(malwareScanRequestDto.getEncryptionType()).isEqualTo(MalwareScanRequest.EncryptionType.UNKNOWN);
        assertThat(malwareScanRequestDto.getWrappedContentKey()).isEqualTo(WRAPPED_CONTENT_KEY);
        assertThat(malwareScanRequestDto.getWrappedFileKey()).isEqualTo(WRAPPED_FILE_KEY);
    }

    @Test
    public void toProto_dtoIsNotNull_converted() {
        final MalwareScanRequestDto malwareScanRequestDto = MalwareScanRequestDto.builder()
            .encryptionType(MalwareScanRequest.EncryptionType.UNKNOWN)
            .wrappedContentKey(WRAPPED_CONTENT_KEY)
            .wrappedFileKey(WRAPPED_FILE_KEY)
            .attachmentMetaDto(AttachmentMetaDto.builder().name(NAME).fileId(FILE_ID).contentType(CONTENT_TYPE).build())
            .build();

        final MalwareScanRequest malwareScanRequest = malwareScanRequestProtoDtoConverter.toProto(malwareScanRequestDto);

        assertThat(malwareScanRequest.getEncryptionType()).isEqualTo(MalwareScanRequest.EncryptionType.UNKNOWN);
        assertThat(malwareScanRequest.getWrappedContentKey()).isEqualTo(WRAPPED_CONTENT_KEY);
        assertThat(malwareScanRequest.getWrappedFileKey()).isEqualTo(WRAPPED_FILE_KEY);
    }

}
