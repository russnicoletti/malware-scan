package com.symphony.malware.scan.converter;

import static org.assertj.core.api.Assertions.assertThat;

import com.symphony.malware.scan.MalwareScanRequest;
import com.symphony.malware.scan.model.MalwareScanRequestDto;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import java.time.Instant;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanRequestProtoDtoConverterTest {

    private static final Long TIME = Instant.now().getEpochSecond();

    private MalwareScanRequestProtoDtoConverter malwareScanRequestConverter;

    @Before
    public void before() {
        this.malwareScanRequestConverter = new MalwareScanRequestProtoDtoConverter();
    }

    @Test
    public void toDto_protoIsNotNull_converted() {
        final MalwareScanRequest malwareScanRequest = MalwareScanRequest.newBuilder().setCreationTime(TIME).build();

        final MalwareScanRequestDto malwareScanRequestDto = malwareScanRequestConverter.toDto(malwareScanRequest);

        assertThat(malwareScanRequestDto.getCreationTime()).isEqualTo(TIME);
    }

    @Test
    public void toDto_protoIsNull_null() {
        assertThat(malwareScanRequestConverter.toDto(null)).isNull();
    }


    @Test
    public void toProto_dtoIsNotNull_converted() {
        final MalwareScanRequestDto malwareScanRequestDto = MalwareScanRequestDto.builder().creationTime(TIME).build();

        final MalwareScanRequest malwareScanRequest = malwareScanRequestConverter.toProto(malwareScanRequestDto);

        assertThat(malwareScanRequest.getCreationTime()).isEqualTo(TIME);
    }

    @Test
    public void toProto_dtoIsNull_converted() {
        assertThat(malwareScanRequestConverter.toProto(null)).isNull();
    }

}
