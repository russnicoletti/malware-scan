package com.symphony.malware.scan.processor;

import static com.symphony.malware.scan.model.MalwareScanResponseDto.Status.FAIL_SEND_REQUEST;
import static com.symphony.malware.scan.model.MalwareScanResponseDto.Status.SUCCESS;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import com.symphony.malware.scan.MalwareScanRequest;
import com.symphony.malware.scan.MalwareScanResponse;
import com.symphony.malware.scan.MalwareScanService;
import com.symphony.malware.scan.Status;
import com.symphony.malware.scan.converter.AttachmentMetaProtoDtoConverter;
import com.symphony.malware.scan.converter.MalwareScanRequestProtoDtoConverter;
import com.symphony.malware.scan.converter.MalwareScanResponseProtoDtoConverter;
import com.symphony.malware.scan.converter.ProtoDtoConverter;
import com.symphony.malware.scan.metrics.MalwareScanningMetrics;
import com.symphony.malware.scan.model.AttachmentMetaDto;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.proto.MalwareScanServiceProtobufFactory;

import com.codahale.metrics.Meter;
import com.codahale.metrics.Timer;
import com.symphony.proto3110.ServiceException;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.UUID;

/**
 * @author Andrey Zavizionov on 2020-01-23
 */
@RunWith(MockitoJUnitRunner.class)
public class SendRequestMalwareScanProcessorMetricsTest {

  private SendRequestMalwareScanProcessor processor;

  private ProtoDtoConverter<MalwareScanRequest, MalwareScanRequestDto> malwareScanProtoDtoConverter
      = new MalwareScanRequestProtoDtoConverter(new AttachmentMetaProtoDtoConverter());
  private ProtoDtoConverter<MalwareScanResponse, MalwareScanResponseDto>
      malwareScanResponseProtoDtoConverter;
  @Mock
  private MalwareScanningMetrics malwareScanMetrics;

  @Mock
  private Timer symproxyRespTimer;
  @Mock
  private Timer.Context symproxyRespTimerContext;
  @Mock
  private MalwareScanServiceProtobufFactory malwareScanServiceProtobufFactory;
  @Mock
  private MalwareScanService.BlockingInterface malwareScanService;
  @Mock
  private Meter successfulRequestsCount;
  @Mock
  private Meter failedRequestsCount;
  @Mock
  private Meter successfulOnRetryCount;
  @Mock
  private Meter failedAfterRetryCount;
  @Mock
  private Timer successfulRetryTimer;
  @Mock
  private Timer.Context successfulRetryTimerContext;

  @Before
  public void setUp() throws Exception {
    malwareScanResponseProtoDtoConverter = new MalwareScanResponseProtoDtoConverter();
    when(malwareScanServiceProtobufFactory.newBlockingStub())
        .thenReturn(malwareScanService);
    when(malwareScanService.submitForScanning(any(), any()))
        .thenReturn(MalwareScanResponse.newBuilder()
            .setStatus(Status.OK)
            .build());

    when(malwareScanMetrics.timeBetweenSubmittingRequestAndGettingResponseFromSymproxy())
        .thenReturn(symproxyRespTimer);
    when(symproxyRespTimer.time()).thenReturn(symproxyRespTimerContext);
    when(malwareScanMetrics.countOfFailedToSubmitRequests()).thenReturn(failedRequestsCount);
    when(malwareScanMetrics.countOfSuccessfulRequests()).thenReturn(successfulRequestsCount);

    processor = new SendRequestMalwareScanProcessor(malwareScanServiceProtobufFactory, malwareScanProtoDtoConverter,
        malwareScanResponseProtoDtoConverter, malwareScanMetrics);
  }

  @Test
  public void testProcessRequest() throws Exception {
    MalwareScanRequestDto malwareScanRequestDto = malwareScanRequest();

    MalwareScanResponseDto response = processor.process(malwareScanRequestDto);
    assertThat(response.getStatus(), is(SUCCESS));

    verifySymproxyResponseTimeMetered();
    verify(malwareScanMetrics).countOfSuccessfulRequests();
    verify(successfulRequestsCount).mark();
  }

  @After
  public void tearDown() throws Exception {
    verifyNoMoreInteractions(malwareScanMetrics, successfulRetryTimer,
        successfulRetryTimerContext, symproxyRespTimer, symproxyRespTimerContext,
        successfulOnRetryCount, successfulRequestsCount, failedAfterRetryCount);
  }

  @Test
  public void testFailedResponse() throws Exception {
    MalwareScanRequestDto malwareScanRequestDto = malwareScanRequest();
    when(malwareScanService.submitForScanning(any(), any()))
        .thenReturn(MalwareScanResponse.newBuilder()
            .setStatus(Status.FAILED)
            .build());

    MalwareScanResponseDto response = processor.process(malwareScanRequestDto);
    assertThat(response.getStatus(), is(FAIL_SEND_REQUEST));

    verifySymproxyResponseTimeMetered();
    verify(malwareScanMetrics).countOfFailedToSubmitRequests();
  }

  @Test
  public void testFailedToSendRequest() throws Exception {
    MalwareScanRequestDto malwareScanRequestDto = malwareScanRequest();
    when(malwareScanService.submitForScanning(any(), any()))
        .thenThrow(ServiceException.class);

    try {
      MalwareScanResponseDto response = processor.process(malwareScanRequestDto);
    } catch (MalwareScanException e) {
      verifySymproxyResponseTimeMetered();
      verify(malwareScanMetrics).countOfFailedToSubmitRequests();
    }
  }

  private void verifySymproxyResponseTimeMetered() {
    verify(malwareScanMetrics)
        .timeBetweenSubmittingRequestAndGettingResponseFromSymproxy();
    verify(symproxyRespTimer).time();
    verify(symproxyRespTimerContext).stop();
  }

  private MalwareScanRequestDto malwareScanRequest() {
    return MalwareScanRequestDto.builder()
        .encryptionType(MalwareScanRequest.EncryptionType.WRAPPED_CONTENT_KEY)
        .wrappedContentKey(randString())
        .wrappedFileKey(randString())
        .traceId(randString())
        .attachmentMetaDto(AttachmentMetaDto.builder()
            .name(randString())
            .fileId(randString())
            .contentType(randString())
            .build())
        .build();
  }

  private String randString() {
    return UUID.randomUUID().toString();
  }
}