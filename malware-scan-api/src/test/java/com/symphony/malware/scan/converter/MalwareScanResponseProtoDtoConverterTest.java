package com.symphony.malware.scan.converter;

import static org.assertj.core.api.Assertions.assertThat;

import com.symphony.malware.scan.MalwareScanResponse;
import com.symphony.malware.scan.Status;
import com.symphony.malware.scan.model.MalwareScanResponseDto;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanResponseProtoDtoConverterTest {

    private static final String ERROR = "Test";

    private MalwareScanResponseProtoDtoConverter malwareScanResponseProtoDtoConverter;

    @Before
    public void before() {
        this.malwareScanResponseProtoDtoConverter = new MalwareScanResponseProtoDtoConverter();
    }

    @Test
    public void toDto_protoIsNotNull_converted() {
        final MalwareScanResponse malwareScanResponse = MalwareScanResponse.newBuilder().setStatus(Status.OK).setError(ERROR).build();

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanResponseProtoDtoConverter.toDto(malwareScanResponse);

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(MalwareScanResponseDto.Status.PROCESSED);
        assertThat(malwareScanResponseDto.getError()).isEqualTo(ERROR);
    }

    @Test
    public void toDto_protoIsNull_null() {
        assertThat(malwareScanResponseProtoDtoConverter.toDto(null)).isNull();
    }


    @Test
    public void toProto_dtoIsNotNull_converted() {
        final MalwareScanResponseDto malwareScanResponseDto = MalwareScanResponseDto.builder().status(MalwareScanResponseDto.Status.PROCESSED).error(ERROR).build();

        final MalwareScanResponse malwareScanResponse = malwareScanResponseProtoDtoConverter.toProto(malwareScanResponseDto);

        assertThat(malwareScanResponse.getStatus()).isEqualTo(Status.OK);
        assertThat(malwareScanResponse.getError()).isEqualTo(ERROR);

    }

    @Test
    public void toProto_dtoIsNull_converted() {
        assertThat(malwareScanResponseProtoDtoConverter.toProto(null)).isNull();
    }

}
