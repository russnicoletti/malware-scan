package com.symphony.malware.scan.converter;

import static org.assertj.core.api.Assertions.assertThat;

import com.symphony.malware.scan.ErrorCode;
import com.symphony.malware.scan.MalwareScanResponse;
import com.symphony.malware.scan.Status;
import com.symphony.malware.scan.model.MalwareScanResponseDto;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanResponseProtoDtoConverterTest {

    private static final String ERROR = "Test";
    private static final String TRACE_ID = "trace-id";

    private MalwareScanResponseProtoDtoConverter malwareScanResponseProtoDtoConverter;

    @Before
    public void before() {
        this.malwareScanResponseProtoDtoConverter = new MalwareScanResponseProtoDtoConverter();
    }

    @Test
    public void toDto_protoIsNotNull_converted() {
        final MalwareScanResponse malwareScanResponse = MalwareScanResponse.newBuilder()
            .setStatus(Status.OK)
            .setError(ERROR)
            .setErrorCode(ErrorCode.FAILED_DECRYPTING_ATTACHMENT)
            .setTraceId(TRACE_ID)
            .build();

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanResponseProtoDtoConverter.toDto(malwareScanResponse);

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(MalwareScanResponseDto.Status.SUCCESS);
        assertThat(malwareScanResponseDto.getError()).isEqualTo(ERROR);
        assertThat(malwareScanResponseDto.getErrorCode()).isEqualTo(ErrorCode.FAILED_DECRYPTING_ATTACHMENT);
        assertThat(malwareScanResponseDto.getTraceId()).isEqualTo(TRACE_ID);
    }

    @Test(expected = UnsupportedOperationException.class)
    public void toProto_dtoIsNotNull_converted() {
        final MalwareScanResponseDto malwareScanResponseDto = MalwareScanResponseDto.builder()
            .status(MalwareScanResponseDto.Status.SUCCESS)
            .error(ERROR)
            .traceId(TRACE_ID)
            .build();

        malwareScanResponseProtoDtoConverter.toProto(malwareScanResponseDto);
    }

}
