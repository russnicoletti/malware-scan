package com.symphony.malware.scan.metrics;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import com.codahale.metrics.Meter;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Timer;
import org.junit.Before;
import org.junit.Test;

/**
 * @author Andrey Zavizionov on 2020-01-27
 */
public class MalwareScanningMetricsTest {

  private MalwareScanningMetrics metrics;
  private MetricRegistry registry;

  @Before
  public void setUp() throws Exception {
    MetricReport metricReport = mock(MetricReport.class);
    registry = new MetricRegistry();
    when(metricReport.getRegistry()).thenReturn(registry);

    metrics = new MalwareScanningMetricsImpl(metricReport);
  }

  @Test
  public void countOfSuccessfulRequests() throws Exception {
    Meter meter = metrics.countOfSuccessfulRequests();
    assertMeterIsFunctional(meter);
  }

  @Test
  public void countOfFailedToSubmitRequests() throws Exception {
    Meter meter = metrics.countOfFailedToSubmitRequests();
    assertMeterIsFunctional(meter);
  }

  @Test
  public void countOfSuccessfulOnRetryRequests() throws Exception {
    Meter meter = metrics.countOfSuccessfulOnRetryRequests();
    assertMeterIsFunctional(meter);
  }

  @Test
  public void countOfFailedToSubmitAfterRetryExhaustedRequest() throws Exception {
    Meter meter = metrics.countOfFailedToSubmitAfterRetryExhaustedRequest();
    assertMeterIsFunctional(meter);
  }

  @Test
  public void timeBetweenInitialFailedRequestAndSuccessfulRetry() throws Exception {
    Timer timer = metrics.timeBetweenInitialFailedRequestAndSuccessfulRetry();
    assertTimerIsFunctional(timer);
  }

  @Test
  public void timeBetweenSubmittingRequestAndGettingResponseFromSymproxy() throws Exception {
    Timer timer = metrics.timeBetweenSubmittingRequestAndGettingResponseFromSymproxy();
    assertTimerIsFunctional(timer);
  }

  @Test
  public void timeBetweenSubmittingRequestAndGettingResponseFromScanner() throws Exception {
    Timer timer = metrics.timeBetweenSubmittingRequestAndGettingResponseFromScanner();
    assertTimerIsFunctional(timer);
  }

  private void assertMeterIsFunctional(Meter meter) {
    assertThat(meter, notNullValue());
    assertThat(meter.getCount(), is(0L));

    meter.mark();
    assertThat(meter.getCount(), is(1L));
    assertThat(registry.getMeters().containsValue(meter), is(true));
  }

  private void assertTimerIsFunctional(Timer timer) {
    assertThat(timer, notNullValue());
    assertThat(timer.getCount(), is(0L));

    Timer.Context time = timer.time();
    time.stop();

    assertThat(timer.getCount(), is(1L));

    assertThat(registry.getTimers().containsValue(timer), is(true));
  }
}