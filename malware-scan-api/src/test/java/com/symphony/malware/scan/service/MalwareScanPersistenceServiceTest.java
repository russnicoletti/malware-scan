package com.symphony.malware.scan.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.Status;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.AttachmentMetaDto;
import com.symphony.malware.scan.model.MalwareScanFileMapping;
import com.symphony.malware.scan.model.MalwareScanResponseDto;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.persistence.service.MalwarePersistenceService;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.Optional;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanPersistenceServiceTest {

    private static final String FILE_ID = "fileId";

    @Mock
    private MalwarePersistenceService malwarePersistenceService;

    private MalwareScanPersistenceService malwareScanPersistenceService;

    @Before
    public void before() {
        this.malwareScanPersistenceService = new MalwareScanPersistenceServiceImpl(malwarePersistenceService);
    }

    @Test
    public void create_persistentException_failed() throws Exception {
        doThrow(PersistentException.class).when(malwarePersistenceService).putMalwareScanFileMapping(any(MalwareScanFileMapping.class));

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanPersistenceService.create(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().build());

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanResponseDto.getError()).contains("Failed to create malware scan information");

        verify(malwarePersistenceService, times(0)).putMalwareScanFileState(any(MalwareScanFileState.class), any(Actor.class));
    }

    @Test
    public void create_malwareScanUpdateException_failed() throws Exception {
        doThrow(MalwareScanException.class).when(malwarePersistenceService).putMalwareScanFileState(any(MalwareScanFileState.class), any(Actor.class));

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanPersistenceService.create(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().build());

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanResponseDto.getError()).contains("Failed to create malware scan information");

        verify(malwarePersistenceService, times(1)).putMalwareScanFileMapping(any(MalwareScanFileMapping.class));
    }

    @Test
    public void create_noException_ok() throws Exception {
        final MalwareScanResponseDto malwareScanResponseDto = malwareScanPersistenceService.create(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().build());

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(Status.OK);
        assertThat(malwareScanResponseDto.getError()).contains("");

        verify(malwarePersistenceService, times(1)).putMalwareScanFileMapping(any(MalwareScanFileMapping.class));
        verify(malwarePersistenceService, times(1)).putMalwareScanFileState(any(MalwareScanFileState.class), eq(Actor.MALWARE_SCANNER));
    }

    @Test
    public void update_persistentException_failed() throws Exception {
        when(malwarePersistenceService.getMalwareScanFileState(FILE_ID)).thenReturn(Optional.of(MalwareScanFileState.builder().build()));
        doThrow(PersistentException.class).when(malwarePersistenceService).putMalwareScanFileState(any(MalwareScanFileState.class), any(Actor.class));

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanResponseDto.getError()).contains("Failed to update malware scan information");
    }

    @Test
    public void update_malwareScanUpdateException_failed() throws Exception {
        when(malwarePersistenceService.getMalwareScanFileState(FILE_ID)).thenReturn(Optional.of(MalwareScanFileState.builder().build()));
        doThrow(MalwareScanException.class).when(malwarePersistenceService).putMalwareScanFileState(any(MalwareScanFileState.class), any(Actor.class));

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanResponseDto.getError()).contains("Failed to update malware scan information");
    }

    @Test
    public void update_existingMalwareScanFileStateNotFound_failed() throws Exception {
        when(malwarePersistenceService.getMalwareScanFileState(FILE_ID)).thenReturn(Optional.empty());

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanResponseDto.getError()).contains("Failed to update malware scan information");

        verify(malwarePersistenceService, times(0)).putMalwareScanFileState(any(MalwareScanFileState.class), any(Actor.class));
    }

    @Test
    public void update_noException_ok() throws Exception {
        when(malwarePersistenceService.getMalwareScanFileState(FILE_ID)).thenReturn(Optional.of(MalwareScanFileState.builder().build()));

        final MalwareScanResponseDto malwareScanResponseDto = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanResponseDto.getStatus()).isEqualTo(Status.OK);
        assertThat(malwareScanResponseDto.getError()).contains("");

        verify(malwarePersistenceService, times(1)).putMalwareScanFileState(any(MalwareScanFileState.class), eq(Actor.MALWARE_SCANNER));
    }

}
