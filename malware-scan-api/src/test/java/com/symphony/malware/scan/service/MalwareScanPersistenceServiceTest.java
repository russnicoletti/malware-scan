package com.symphony.malware.scan.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.Status;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.AttachmentMetaDto;
import com.symphony.malware.scan.model.MalwareScanMapping;
import com.symphony.malware.scan.model.MalwareScanPersistenceResponse;
import com.symphony.malware.scan.model.MalwareScanRequestDto;
import com.symphony.malware.scan.model.MalwareScanState;
import com.symphony.malware.scan.persistence.exception.MalwareScanUpdateException;
import com.symphony.malware.scan.persistence.service.MalwarePersistenceService;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import java.util.Optional;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanPersistenceServiceTest {

    private static final String FILE_ID = "fileId";

    @Mock
    private MalwarePersistenceService malwarePersistenceService;

    private MalwareScanPersistenceService malwareScanPersistenceService;

    @Before
    public void before() {
        this.malwareScanPersistenceService = new MalwareScanPersistenceServiceImpl(malwarePersistenceService);
    }

    @Test
    public void create_persistentException_failed() throws Exception {
        doThrow(PersistentException.class).when(malwarePersistenceService).putMalwareScanMapping(any(MalwareScanMapping.class));

        final MalwareScanPersistenceResponse malwareScanPersistenceResponse = malwareScanPersistenceService.create(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().build());

        assertThat(malwareScanPersistenceResponse.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanPersistenceResponse.getError()).contains("Failed to create malware scan information");

        verify(malwarePersistenceService, times(0)).putMalwareScanState(any(MalwareScanState.class), any(Actor.class));
    }

    @Test
    public void create_malwareScanUpdateException_failed() throws Exception {
        doThrow(MalwareScanUpdateException.class).when(malwarePersistenceService).putMalwareScanState(any(MalwareScanState.class), any(Actor.class));

        final MalwareScanPersistenceResponse malwareScanPersistenceResponse = malwareScanPersistenceService.create(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().build());

        assertThat(malwareScanPersistenceResponse.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanPersistenceResponse.getError()).contains("Failed to create malware scan information");

        verify(malwarePersistenceService, times(1)).putMalwareScanMapping(any(MalwareScanMapping.class));
    }

    @Test
    public void create_noException_ok() throws Exception {
        final MalwareScanPersistenceResponse malwareScanPersistenceResponse = malwareScanPersistenceService.create(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().build());

        assertThat(malwareScanPersistenceResponse.getStatus()).isEqualTo(Status.OK);
        assertThat(malwareScanPersistenceResponse.getError()).contains("");

        verify(malwarePersistenceService, times(1)).putMalwareScanMapping(any(MalwareScanMapping.class));
        verify(malwarePersistenceService, times(1)).putMalwareScanState(any(MalwareScanState.class), eq(Actor.MALWARE_SCANNER));
    }

    @Test
    public void update_persistentException_failed() throws Exception {
        when(malwarePersistenceService.getMalwareScanState(FILE_ID)).thenReturn(Optional.of(MalwareScanState.builder().build()));
        doThrow(PersistentException.class).when(malwarePersistenceService).putMalwareScanState(any(MalwareScanState.class), any(Actor.class));

        final MalwareScanPersistenceResponse malwareScanPersistenceResponse = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanPersistenceResponse.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanPersistenceResponse.getError()).contains("Failed to update malware scan information");
    }

    @Test
    public void update_malwareScanUpdateException_failed() throws Exception {
        when(malwarePersistenceService.getMalwareScanState(FILE_ID)).thenReturn(Optional.of(MalwareScanState.builder().build()));
        doThrow(MalwareScanUpdateException.class).when(malwarePersistenceService).putMalwareScanState(any(MalwareScanState.class), any(Actor.class));

        final MalwareScanPersistenceResponse malwareScanPersistenceResponse = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanPersistenceResponse.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanPersistenceResponse.getError()).contains("Failed to update malware scan information");
    }

    @Test
    public void update_existingMalwareScanStateNotFound_failed() throws Exception {
        when(malwarePersistenceService.getMalwareScanState(FILE_ID)).thenReturn(Optional.empty());

        final MalwareScanPersistenceResponse malwareScanPersistenceResponse = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanPersistenceResponse.getStatus()).isEqualTo(Status.FAILED);
        assertThat(malwareScanPersistenceResponse.getError()).contains("Failed to update malware scan information");

        verify(malwarePersistenceService, times(0)).putMalwareScanState(any(MalwareScanState.class), any(Actor.class));
    }

    @Test
    public void update_noException_ok() throws Exception {
        when(malwarePersistenceService.getMalwareScanState(FILE_ID)).thenReturn(Optional.of(MalwareScanState.builder().build()));

        final MalwareScanPersistenceResponse malwareScanPersistenceResponse = malwareScanPersistenceService.update(
            MalwareScanRequestDto.builder().build(), AttachmentMetaDto.builder().fileId(FILE_ID).build());

        assertThat(malwareScanPersistenceResponse.getStatus()).isEqualTo(Status.OK);
        assertThat(malwareScanPersistenceResponse.getError()).contains("");

        verify(malwarePersistenceService, times(1)).putMalwareScanState(any(MalwareScanState.class), eq(Actor.MALWARE_SCANNER));
    }

}
