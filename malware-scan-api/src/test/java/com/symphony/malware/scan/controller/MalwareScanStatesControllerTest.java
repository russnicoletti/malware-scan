package com.symphony.malware.scan.controller;

import com.symphony.exceptions.service.ForbiddenRequestException;
import com.symphony.malware.scan.exception.MalwareScanFileNotFoundException;
import com.symphony.malware.scan.model.ConversationDetailsDto;
import com.symphony.malware.scan.model.FileInfoDto;
import com.symphony.malware.scan.model.MalwareScanFileStateDto;
import com.symphony.malware.scan.model.MalwareScanFileStatesHistoryDto;
import com.symphony.malware.scan.service.EntitlementVerifier;
import com.symphony.malware.scan.service.MalwareScanStateService;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import javax.servlet.http.HttpServletRequest;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static com.symphony.data.common.roles.entitlableactions.EntitleableActionID.MANAGE_EXPRESSION_FILTERS;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/**
 * @author anton.g
 */
@RunWith(MockitoJUnitRunner.class)
public class MalwareScanStatesControllerTest {

   @Mock
   private MalwareScanStateService scanStateService;

   @Mock
   private EntitlementVerifier entitlementVerifier;

   @InjectMocks
   private MalwareScanStatesController controller;

   private MockMvc mockMvc;

   @Before
   public void setup() throws Exception {
      mockMvc = MockMvcBuilders
              .standaloneSetup(controller)
              .setControllerAdvice(new MalwareScanStatesControllerAdvice())
              .build();
   }

   @Test
   public void getMalwareAttachmentStateHistory_Success() throws Exception {
      // ARRANGE
      String fileId = "1";

      List<MalwareScanFileStateDto> scanStates = new ArrayList<>();
      String filename = UUID.randomUUID().toString();
      long fileSize = 123L;
      long timestamp = Instant.now().toEpochMilli();
      String scanningState = "OK";

      scanStates.add(new MalwareScanFileStateDto(scanningState, timestamp, MalwareScanFileStateDto.Source.SYMPHONY));
      long timestamp1 = Instant.now().toEpochMilli();
      String scanningState1 = "BAD";

      scanStates.add(new MalwareScanFileStateDto(scanningState1, timestamp1, MalwareScanFileStateDto.Source.CUSTOMER));

      List<ConversationDetailsDto> conversationDetails = new ArrayList<>();
      String streamId = UUID.randomUUID().toString();
      String streamName = UUID.randomUUID().toString();
      String streamType = UUID.randomUUID().toString();
      String messageId = UUID.randomUUID().toString();
      String sender = "test@mail.com";
      conversationDetails.add(new ConversationDetailsDto(streamId, streamName, streamType, messageId, sender));

      String streamId1 = UUID.randomUUID().toString();
      String streamName1 = UUID.randomUUID().toString();
      String streamType1 = UUID.randomUUID().toString();
      String messageId1 = UUID.randomUUID().toString();
      String sender1 = "another-test@mail.com";
      conversationDetails.add(new ConversationDetailsDto(streamId1, streamName1, streamType1, messageId1, sender1));

      FileInfoDto fileInfo = new FileInfoDto(filename, fileId, fileSize);

      MalwareScanFileStatesHistoryDto malwareScanStatesHistory = new MalwareScanFileStatesHistoryDto(fileInfo, scanStates, conversationDetails);
      when(scanStateService.getMalwareAttachmentStatesHistory(fileId)).thenReturn(malwareScanStatesHistory);

      // ACT
      mockMvc.perform(
              get("/api/v1/attachments/malware-scan/states/history/" + fileId))
              // ASSERT
              .andExpect(status().isOk())
              .andExpect(content().json("{\n" +
                      "    \"fileInfo\": {\n" +
                      "        \"fileName\": \"" + filename + "\",\n" +
                      "        \"fileId\":\"" + fileId + "\",\n" +
                      "        \"fileSize\":" + fileSize + "\n" +
                      "    },\n" +
                      "    \"scanStates\":[\n" +
                      "    {\n" +
                      "        \"scanningState\":\"" + scanningState + "\",\n" +
                      "        \"timestamp\":" + timestamp + ",\n" +
                      "        \"source\": \"Symphony\"\n" +
                      "    },\n" +
                      "    {\n" +
                      "        \"scanningState\":\"" + scanningState1 + "\",\n" +
                      "        \"timestamp\":" + timestamp1 + ",\n" +
                      "        \"source\": \"Customer\"\n" +
                      "    }\n" +
                      "  ],\n" +
                      "    \"conversationDetails\":[\n" +
                      "    {\n" +
                      "        \"streamId\" : \"" + streamId + "\",\n" +
                      "        \"streamName\" : \"" + streamName + "\",\n" +
                      "        \"streamType\" : \"" + streamType + "\",\n" +
                      "        \"sender\":   \"" + sender + "\",\n" +
                      "        \"messageId\" : \"" + messageId + "\"\n" +
                      "    },\n" +
                      "    {\n" +
                      "        \"streamId\" : \"" + streamId1 + "\",\n" +
                      "        \"streamName\" : \"" + streamName1 + "\",\n" +
                      "        \"streamType\" : \"" + streamType1 + "\",\n" +
                      "        \"sender\":   \"" + sender1 + "\",\n" +
                      "        \"messageId\" : \"" + messageId1 + "\"\n" +
                      "    }\n" +
                      "   ]\n" +
                      "}"));

      verify(scanStateService).getMalwareAttachmentStatesHistory(fileId);
      verify(entitlementVerifier).verify(any(HttpServletRequest.class), eq(MANAGE_EXPRESSION_FILTERS));
   }

   @Test
   public void getMalwareAttachmentStateHistory_EntitlementCheckFailure() throws Exception {
      String fileId = "1";
      doThrow(ForbiddenRequestException.class).when(entitlementVerifier).verify(any(HttpServletRequest.class), eq(MANAGE_EXPRESSION_FILTERS));

      mockMvc.perform(get("/api/v1/attachments/malware-scan/states/history/" + fileId))
              .andExpect(status().isForbidden())
              .andExpect(content().json("{\"message\":\"Not entitled to access resource: endpoint entitlement check failed\"}"));

      verify(entitlementVerifier).verify(any(HttpServletRequest.class), eq(MANAGE_EXPRESSION_FILTERS));
   }

   @Test
   public void getMalwareAttachmentStateHistory_NoHistoryFoundException() throws Exception {
      String fileId = "1";
      when(scanStateService.getMalwareAttachmentStatesHistory(fileId)).thenThrow(new MalwareScanFileNotFoundException(fileId));

      mockMvc.perform(get("/api/v1/attachments/malware-scan/states/history/" + fileId))
              .andExpect(status().isNotFound())
              .andExpect(content().json("{\"message\":\"Malware scan states history not found for file " + fileId + "\"}"));

      verify(scanStateService).getMalwareAttachmentStatesHistory(fileId);
      verify(entitlementVerifier).verify(any(HttpServletRequest.class), eq(MANAGE_EXPRESSION_FILTERS));
   }

   @Test
   public void getMalwareAttachmentStateHistory_UnexpectedError() throws Exception {
      String fileId = "1";
      String errorMsg = UUID.randomUUID().toString();

      when(scanStateService.getMalwareAttachmentStatesHistory(fileId)).thenThrow(new RuntimeException(errorMsg));

      mockMvc.perform(get("/api/v1/attachments/malware-scan/states/history/" + fileId))
              .andExpect(status().isInternalServerError())
              .andExpect(content().json("{\"message\":\"" + errorMsg + "\"}"));

      verify(scanStateService).getMalwareAttachmentStatesHistory(fileId);
      verify(entitlementVerifier).verify(any(HttpServletRequest.class), eq(MANAGE_EXPRESSION_FILTERS));
   }

   @After
   public void after() {
      verifyNoMoreInteractions(scanStateService, entitlementVerifier);
   }

}