package com.symphony.malware.scan.service;

import com.google.common.collect.Ordering;
import com.symphony.clouds.api.storage.v1.FileMetaData;
import com.symphony.exceptions.service.InternalServiceException;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.FileInfoDto;
import com.symphony.malware.scan.model.MalwareScanFileMapping;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.model.MalwareScanFileStateDto;
import com.symphony.malware.scan.model.MalwareScanFileStatesHistoryDto;
import com.symphony.malware.scan.model.MessageDetailsDto;
import com.symphony.malware.scan.model.Sender;
import com.symphony.malware.scan.persistence.service.MalwareScanPersistenceService;
import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import util.TimestampMillisSupplier;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

/**
 * @author anton.g
 */
@RunWith(MockitoJUnitRunner.class)
public class MalwareScanStateServiceImplTest {

   @Mock
   private MalwareScanPersistenceService malwareScanPersistenceService;

   @Mock
   private AttachmentFileService attachmentFileService;

   @InjectMocks
   private MalwareScanStateServiceImpl malwareScanStateService;

   TimestampMillisSupplier timestampMillisSupplier = new TimestampMillisSupplier();

   @Test
   public void testGetMalwareScanStatesHistory_Success() throws Exception {

      // ARRANGE
      String fileId = UUID.randomUUID().toString();
      String fileName = UUID.randomUUID().toString();

      long sizeInBytes = 1234567L;

      // mocking malware states
      List<MalwareScanFileStateDto> expectedMalwareScanFileStates = new ArrayList<>();
      List<MalwareScanFileState> fileStates = new ArrayList<>();

      String messageId1 = UUID.randomUUID().toString();
      MalwareScanFileState.Status status1 = MalwareScanFileState.Status.BAD;
      Long createTimestamp1 = timestampMillisSupplier.now() + 100;
      Actor lastUpdatedBy1 = Actor.MALWARE_SCANNER;

      MalwareScanFileState fileState1 = createMalwareScanFileState(fileId, messageId1, status1, createTimestamp1, lastUpdatedBy1);
      fileStates.add(fileState1);

      expectedMalwareScanFileStates.add(new MalwareScanFileStateDto(status1.toString(), createTimestamp1, MalwareScanFileStateDto.Source.CUSTOMER));

      String messageId2 = UUID.randomUUID().toString();
      MalwareScanFileState.Status status2 = MalwareScanFileState.Status.SUBMITTED;
      Long createTimestamp2 = timestampMillisSupplier.now() + 10;
      Actor lastUpdatedBy2 = Actor.SYMPHONY;

      MalwareScanFileState fileState2 = createMalwareScanFileState(fileId, messageId2, status2, createTimestamp2, lastUpdatedBy2);
      fileStates.add(fileState2);

      expectedMalwareScanFileStates.add(new MalwareScanFileStateDto(status2.toString(), createTimestamp2, MalwareScanFileStateDto.Source.SYMPHONY));

      String messageId = UUID.randomUUID().toString();
      MalwareScanFileState.Status status = MalwareScanFileState.Status.PENDING;
      Long createTimestamp = timestampMillisSupplier.now();
      Actor lastUpdatedBy = Actor.SYMPHONY;

      MalwareScanFileState fileState = createMalwareScanFileState(fileId, messageId, status, createTimestamp, lastUpdatedBy);
      fileStates.add(fileState);

      expectedMalwareScanFileStates.add(new MalwareScanFileStateDto(status.toString(), createTimestamp, MalwareScanFileStateDto.Source.SYMPHONY));

      when(malwareScanPersistenceService.getMalwareScanFileStates(fileId)).thenReturn(fileStates);

      // mocking file metadata
      FileMetaData fileMetaData = new FileMetaData(123L, sizeInBytes, "TYPE", true);
      fileMetaData.setName(fileName);
      fileMetaData.setFileId(fileId);
      when(attachmentFileService.getFileMetadata(fileId)).thenReturn(Optional.of(fileMetaData));

      // mocking malware scan file mappings
      List<MalwareScanFileMapping> scanFileMappings = new ArrayList<>();
      List<MessageDetailsDto> expectedConversationDetails = new ArrayList<>();

      for (int i = 0; i < 5; i++) {
         String senderEmail = UUID.randomUUID().toString() + "@mail.com";
         String streamId = UUID.randomUUID().toString();
         String streamName = UUID.randomUUID().toString();
         String streamType = UUID.randomUUID().toString();

         MalwareScanFileMapping scanFileMapping = createMalwareScanFileMapping(fileId, messageId, senderEmail, streamId, streamName, streamType);

         expectedConversationDetails.add(new MessageDetailsDto(streamId, streamName, streamType, messageId, senderEmail));
         scanFileMappings.add(scanFileMapping);
      }

      FileInfoDto fileInfo = new FileInfoDto(fileName, fileId, sizeInBytes);

      when(malwareScanPersistenceService.getMalwareScanFileMappings(fileId)).thenReturn(scanFileMappings);

      MalwareScanFileStatesHistoryDto expectedHistory = new MalwareScanFileStatesHistoryDto(fileInfo, expectedMalwareScanFileStates, expectedConversationDetails);

      // ACT
      MalwareScanFileStatesHistoryDto actualHistory = malwareScanStateService.getMalwareAttachmentStatesHistory(fileId).get();

      // ASSERT
      List<Long> timestamps = actualHistory.getScanStates().stream().map(MalwareScanFileStateDto::getTimestamp).collect(Collectors.toList());
      assertTrue(Ordering.natural().reverse().isOrdered(timestamps));

      assertEquals(expectedHistory, actualHistory);

      verify(malwareScanPersistenceService).getMalwareScanFileMappings(fileId);
      verify(malwareScanPersistenceService).getMalwareScanFileStates(fileId);
   }

   @Test(expected = InternalServiceException.class)
   public void testGetMalwareScanStatesHistory_FileMetadataNotFound() throws Exception {
      // ARRANGE
      String fileId = UUID.randomUUID().toString();

      // mocking malware states
      List<MalwareScanFileState> fileStates = new ArrayList<>();

      String messageId = UUID.randomUUID().toString();
      MalwareScanFileState.Status status = MalwareScanFileState.Status.PENDING;
      Long createTimestamp = timestampMillisSupplier.now();
      Actor lastUpdatedBy = Actor.SYMPHONY;

      MalwareScanFileState fileState = createMalwareScanFileState(fileId, messageId, status, createTimestamp, lastUpdatedBy);
      fileStates.add(fileState);

      String messageId1 = UUID.randomUUID().toString();
      MalwareScanFileState.Status status1 = MalwareScanFileState.Status.BAD;
      Long createTimestamp1 = timestampMillisSupplier.now();
      Actor lastUpdatedBy1 = Actor.MALWARE_SCANNER;

      MalwareScanFileState fileState1 = createMalwareScanFileState(fileId, messageId1, status1, createTimestamp1, lastUpdatedBy1);
      fileStates.add(fileState1);

      when(malwareScanPersistenceService.getMalwareScanFileStates(fileId)).thenReturn(fileStates);

      when(attachmentFileService.getFileMetadata(fileId)).thenReturn(Optional.empty());

      // mocking malware scan file mappings
      List<MalwareScanFileMapping> scanFileMappings = new ArrayList<>();

      MalwareScanFileMapping scanFileMapping = createMalwareScanFileMapping(fileId, messageId, "test@mail.com", UUID.randomUUID().toString(), UUID.randomUUID().toString(), UUID.randomUUID().toString());

      scanFileMappings.add(scanFileMapping);

      when(malwareScanPersistenceService.getMalwareScanFileMappings(fileId)).thenReturn(scanFileMappings);

      // ACT
      try {
         malwareScanStateService.getMalwareAttachmentStatesHistory(fileId);
      } finally {
         // ASSERT
         verify(malwareScanPersistenceService).getMalwareScanFileMappings(fileId);
         verify(malwareScanPersistenceService).getMalwareScanFileStates(fileId);
      }
   }

   @Test(expected = InternalServiceException.class)
   public void testGetMalwareScanStatesHistory_NoMalwareScanFileMappingFound() throws Exception {
      // ARRANGE
      String fileId = UUID.randomUUID().toString();

      // mocking malware states
      List<MalwareScanFileState> fileStates = new ArrayList<>();

      String messageId = UUID.randomUUID().toString();
      MalwareScanFileState.Status status = MalwareScanFileState.Status.BAD;
      Long createTimestamp = timestampMillisSupplier.now();
      Actor lastUpdatedBy = Actor.MALWARE_SCANNER;

      MalwareScanFileState fileState = createMalwareScanFileState(fileId, messageId, status, createTimestamp, lastUpdatedBy);
      fileStates.add(fileState);

      when(malwareScanPersistenceService.getMalwareScanFileStates(fileId)).thenReturn(fileStates);
      when(malwareScanPersistenceService.getMalwareScanFileMappings(fileId)).thenReturn(Collections.emptyList());

      try {
         // ACT
         malwareScanStateService.getMalwareAttachmentStatesHistory(fileId);
      } finally {
         // ASSERT
         verify(malwareScanPersistenceService).getMalwareScanFileStates(fileId);
         verify(malwareScanPersistenceService).getMalwareScanFileMappings(fileId);
      }
   }

   @Test
   public void testGetMalwareScanStatesHistory_NoStateHistoryFound() throws Exception {
      // ARRANGE
      String fileId = UUID.randomUUID().toString();

      when(malwareScanPersistenceService.getMalwareScanFileStates(fileId)).thenReturn(Collections.emptyList());

      // ACT

      Optional<MalwareScanFileStatesHistoryDto> malwareScanFileStatesHistoryDto = malwareScanStateService.getMalwareAttachmentStatesHistory(fileId);
      // ASSERT
      assertFalse(malwareScanFileStatesHistoryDto.isPresent());
      verify(malwareScanPersistenceService).getMalwareScanFileStates(fileId);
   }

   @After
   public void after() {
      verifyNoMoreInteractions(malwareScanPersistenceService);
   }

   private MalwareScanFileMapping createMalwareScanFileMapping(String fileId, String messageId, String senderEmail, String streamId, String streamName, String streamType) {
      return MalwareScanFileMapping
              .builder()
              .fileId(fileId)
              .messageId(messageId)
              .streamId(streamId)
              .streamName(streamName)
              .streamType(streamType)
              .sender(Sender.builder().email(senderEmail).build())
              .build();
   }

   private MalwareScanFileState createMalwareScanFileState(String fileId, String messageId, MalwareScanFileState.Status status, Long createTimestamp, Actor lastUpdatedBy) {
      return MalwareScanFileState
              .builder()
              .fileId(fileId)
              .status(status)
              .createTimestamp(createTimestamp)
              .lastUpdateTimestamp(createTimestamp)
              .lastUpdatedBy(lastUpdatedBy)
              .originalMessageId(messageId)
              .build();
   }

}