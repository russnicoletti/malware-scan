<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.symphony.malware-scan</groupId>
    <artifactId>malware-scan-parent</artifactId>
    <version>1.54.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>data-lib</module>
    </modules>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.reportEncoding>UTF-8</project.build.reportEncoding>
        <mimetypes.package>com.symphony.mimetypes</mimetypes.package>
        <failsafe.plugin.version>2.20</failsafe.plugin.version>
        <nanohttpd.version>2.2.0</nanohttpd.version>
        <junit.version>4.12</junit.version>
        <okhttp.version>2.7.5</okhttp.version>
        <symphony-library.version>3.0.15</symphony-library.version>
        <symp-data-persistence-lib.version>1.8.1</symp-data-persistence-lib.version>
        <guava.version>18.0</guava.version>
        <symphonySkipIntegrationTests>true</symphonySkipIntegrationTests>
        <mockito-all.version>1.9.5</mockito-all.version>
        <symphonySkipCodeCoverage>true</symphonySkipCodeCoverage>
        <pathToCover2Cover />
        <jacoco.plugin.version>0.7.5.201505241946</jacoco.plugin.version>
        <symphonyCoverageDest>target/site/coverage</symphonyCoverageDest>
        <httpclient.version>4.5.3</httpclient.version>
        <commons-io.version>2.4</commons-io.version>
        <spring.version>4.3.5.RELEASE</spring.version>
        <jackson.version>2.9.2</jackson.version>
        <validation-api.version>1.1.0.Final</validation-api.version>
        <remote-service-sdk.version>1.8.3</remote-service-sdk.version>
        <commons-beanutils.version>1.9.3</commons-beanutils.version>
        <hibernate-validator.version>4.3.2.Final</hibernate-validator.version>
        <commons.lang3.version>3.4</commons.lang3.version>
        <swagger-annotations.version>1.5.19</swagger-annotations.version>
        <swagger.codegen.plugin.version>2.3.1</swagger.codegen.plugin.version>
        <javax.servlet-api.version>3.1.0</javax.servlet-api.version>
        <gson.version>2.8.0</gson.version>
        <restassured.version>2.4.1</restassured.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--symphony dependencies-->
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>logging</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>metric</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>messaging</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <!--external dependecies-->
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>configuration</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <dependency>
                <groupId>org.nanohttpd</groupId>
                <artifactId>nanohttpd</artifactId>
                <version>${nanohttpd.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>com.squareup.okhttp</groupId>
                <artifactId>okhttp</artifactId>
                <version>${okhttp.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-all</artifactId>
                <version>${mockito-all.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito-all.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.symphony.app</groupId>
                <artifactId>protobuf-http</artifactId>
                <version>${symapp.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony.app</groupId>
                <artifactId>protobuf-rlp</artifactId>
                <version>${symapp.version}</version>
            </dependency>
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>${validation-api.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax.servlet-api.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>remote-service-sdk</artifactId>
                <version>${remote-service-sdk.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-beanutils</groupId>
                <artifactId>commons-beanutils</artifactId>
                <version>${commons-beanutils.version}</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>${hibernate-validator.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>metrics</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>configuration-api</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>configuration-zk</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang3.version}</version>
            </dependency>
            <dependency>
                <groupId>com.symphony</groupId>
                <artifactId>foundation</artifactId>
                <version>${symphony-library.version}</version>
            </dependency>
            <dependency>
                <groupId>io.swagger</groupId>
                <artifactId>swagger-annotations</artifactId>
                <version>${swagger-annotations.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <repositories>
        <repository>
            <id>symphony</id>
            <name>symphony releases</name>
            <url>https://repo.symphony.com/artifactory/libs-release</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>snapshots</id>
            <url>https://repo.symphony.com/artifactory/libs-snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>symphony</id>
            <name>plugins-release</name>
            <url>https://repo.symphony.com/artifactory/plugins-release</url>
        </pluginRepository>
        <pluginRepository>
            <snapshots />
            <id>snapshots</id>
            <name>plugins-snapshot</name>
            <url>https://repo.symphony.com/artifactory/plugins-snapshot</url>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${failsafe.plugin.version}</version>
                    <configuration>
                        <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        <forkCount>1</forkCount>
                        <failIfNoTests>false</failIfNoTests>
                        <threadCount>1</threadCount>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <!-- =================================================== -->
                <!-- This plugin is used to run integration tests under the phase verify -->
                <!-- =================================================== -->
                <!-- by default, includes test files matching the following
                <includes>
                     <include>**/IT*.java</include>
                    <include>**/*IT.java</include>
                    <include>**/*ITCase.java</include>
                </includes>
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <!--  this variable is used in lower level poms like module/integrationTests via inheritance-->
                    <!--  this variable is true by default and activated by profiles -->
                    <skipTests>${symphonySkipIntegrationTests}</skipTests>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                    <failIfNoTests>false</failIfNoTests>
                    <threadCount>2</threadCount>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <!-- ============================================================== -->
            <!-- Integration Tests - Activate -->
            <!--  mvn clean [test|...|verify|install] -P IntegrationTests -->
            <!--  mvn clean [test|...|verify|install] -DsymphonySkipIntegrationTests=false -->
            <!-- ============================================================== -->
            <id>IntegrationTests</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <symphonySkipIntegrationTests>false</symphonySkipIntegrationTests>
                <log4j2.consoleLogLevel>OFF</log4j2.consoleLogLevel>
            </properties>
        </profile>

        <profile>
            <!-- ========================================================== -->
            <!-- Code Coverage with Jacoco -->
            <!--  to activate codeCoverate for either UnitTests, IntegrationTests or both, include this profile -->
            <!--  mvn clean [test|...|verify|install] -P UnitTests,CodeCoverage -->
            <!--  mvn clean [test|...|verify|install] -P IntegrationTests,CodeCoverage -->
            <!--  mvn clean [test|...|verify|install] -P UnitTests,IntegrationTests,CodeCoverage -->
            <!-- ============================================================== -->
            <id>CodeCoverage</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <!-- Activate code coverage -->
                <symphonySkipCodeCoverage>false</symphonySkipCodeCoverage>
            </properties>
            <build>
                <plugins>
                    <!-- ========================================================== -->
                    <!-- Code Coverage with Jacoco -->
                    <!-- ========================================================== -->
                    <!-- Coverage for unit tests -->
                    <!-- ========================================================== -->
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco.plugin.version}</version>
                        <configuration>
                            <excludes>
                                <exclude>com/symphony/dlp/data/model/**</exclude>
                                <exclude>com/symphony/services/dlp/**</exclude>
                                <exclude>com/symphony/services/rlp/**</exclude>
                                <exclude>com/symphony/services/symproxy/**</exclude>
                            </excludes>
                        </configuration>
                        <executions>
                            <!-- Prepares the property pointing to the JaCoCo runtime agent which
                                is passed as VM argument when Maven the Surefire plugin is executed. -->
                            <execution>
                                <id>pre-unit-test</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <skip>${symphonySkipCodeCoverage}</skip>

                                    <!-- Sets the path to the file which contains the execution data. -->
                                    <destFile>${symphonyCoverageDest}/jacoco_ut.exec</destFile>
                                    <append>true</append>
                                    <!-- DON'T add below property as a configuration but add in properties
                                        section Please refer to : http://www.eclemma.org/jacoco/trunk/doc/prepare-agent-mojo.html
                                        <propertyName>surefireArgLine</propertyName> -->
                                </configuration>
                            </execution>
                            <!-- Ensures that the code coverage report for unit tests is created
                                after unit tests have been run. -->
                            <execution>
                                <id>post-unit-test</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                                <configuration>
                                    <skip>${symphonySkipCodeCoverage}</skip>

                                    <!-- Sets the path to the file which contains the execution data. -->
                                    <dataFile>${symphonyCoverageDest}/jacoco_ut.exec</dataFile>
                                    <!-- Sets the output directory for the code coverage report. -->
                                    <outputDirectory>${symphonyCoverageDest}/jacoco-ut
                                    </outputDirectory>
                                </configuration>
                            </execution>

                            <!-- ========================================================== -->
                            <!-- Coverage for tests defined as integration tests -->
                            <!-- ========================================================== -->
                            <!-- Prepares the property pointing to the JaCoCo runtime agent which
                                is passed as VM argument when Maven the Failsafe plugin is executed. -->
                            <execution>
                                <id>pre-integration-test</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <skip>${symphonySkipCodeCoverage}</skip>
                                    <!-- Sets the path to the file which contains the execution data. -->
                                    <destFile>${symphonyCoverageDest}/jacoco_it.exec</destFile>
                                    <append>true</append>
                                    <!-- Sets the name of the property containing the settings for JaCoCo
                                        runtime agent. <propertyName>failsafeArgLine</propertyName> -->
                                </configuration>
                            </execution>
                            <!-- Ensures that the code coverage report for integration tests after
                                integration tests have been run. -->
                            <execution>
                                <id>post-integration-test</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                                <configuration>
                                    <skip>${symphonySkipCodeCoverage}</skip>
                                    <!-- Sets the path to the file which contains the execution data. -->
                                    <dataFile>${symphonyCoverageDest}/jacoco_it.exec</dataFile>
                                    <!-- Sets the output directory for the code coverage report. -->
                                    <outputDirectory>${symphonyCoverageDest}/jacoco-it
                                    </outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>JacocoToCobertura</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.symphony</groupId>
                        <artifactId>jacoco-to-cobertura-plugin</artifactId>
                        <version>1.0</version>
                        <configuration>
                            <baseDirectory>${project.build.directory}</baseDirectory>
                            <!-- pass this value as system property, path to cover2cover.py from
                                    https://github.com/rix0rrr/cover2cover -->
                            <pathToCover2Cover>${pathToCover2Cover}</pathToCover2Cover>
                            <cover2CoverTimeoutInMillis>10000</cover2CoverTimeoutInMillis>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>test</phase>
                                <goals>
                                    <goal>translate</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
