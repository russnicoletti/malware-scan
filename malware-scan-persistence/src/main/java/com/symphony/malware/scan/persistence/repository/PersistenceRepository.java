package com.symphony.malware.scan.persistence.repository;

import com.symphony.data.mapper.PersistentException;

import javax.annotation.Nonnull;

/**
 * Persistence repository
 * @param <K> key type
 * @param <V> value type
 */
public interface PersistenceRepository<K, V> {

    /**
     * Save value with optimistic locking, by providing the current value that's expected to be
     * updated with the new value.
     * This method guarantees that will save the newValue only if the currently associated value
     * to the key is currentValue.
     * When the given currentValue is Null, the behavior will be similar tu save if absent.
     * @param key key
     * @param currentValue value
     * @param newValue
     * @throws PersistentException
     * @throws IllegalArgumentException if the currentValue is not null and its Version is not the
     * same as the newValue
     */
    void save(@Nonnull K key, V currentValue, @Nonnull V newValue) throws PersistentException;

    /**
     * Load value by key
     * @param key key
     * @return value for the given key
     * @throws PersistentException
     */
    V load(@Nonnull K key) throws PersistentException;

}
