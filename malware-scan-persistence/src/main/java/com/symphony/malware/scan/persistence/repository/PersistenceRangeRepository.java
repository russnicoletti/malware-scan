package com.symphony.malware.scan.persistence.repository;

import com.symphony.data.mapper.PersistentException;

import java.util.List;

import javax.annotation.Nonnull;

/**
 * Persistence ranged repository
 * @param <K> key type
 * @param <R> range type
 * @param <V> value type
 */
public interface PersistenceRangeRepository<K, R, V> {

    /**
     * Save value
     * @param key key
     * @param rangeKey range key
     * @param value value
     * @throws PersistentException
     */
    void save(@Nonnull K key, @Nonnull R rangeKey, @Nonnull V value) throws PersistentException;

    /**
     * Load range of values by key
     * @param key key
     * @return range of values for given key
     * @throws PersistentException
     */
    List<V> loadRange(@Nonnull K key) throws PersistentException;

    /**
     * Load range of values by key, with a starting range
     * @param key key
     * @param from starting range
     * @return range of values for a given key and starting range
     * @throws PersistentException
     */
    List<V> loadRange(@Nonnull K key, @Nonnull R from) throws PersistentException;

    /**
     * Load range of values by key, with starting and ending range
     * @param key key
     * @param from starting range
     * @param to ending range
     * @return range of values for a given key, starting range and ending range
     * @throws PersistentException
     */
    List<V> loadRange(@Nonnull K key, @Nonnull R from, @Nonnull R to) throws PersistentException;

}
