package com.symphony.malware.scan.persistence.service;

import static com.symphony.malware.scan.model.MalwareScanFileState.Status;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.Actor;
import com.symphony.malware.scan.model.MalwareScanFileMapping;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.persistence.exception.MalwareScanException;
import com.symphony.malware.scan.persistence.repository.MalwareScanFileMappingRangeRepository.RangeKey;
import com.symphony.malware.scan.persistence.repository.PersistenceRangeRepository;
import com.symphony.malware.scan.persistence.repository.PersistenceRepository;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import util.TemporalSupplier;

import java.time.Instant;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.stream.Collectors;

import javax.annotation.Nonnull;

public class MalwarePersistenceService {

  /**
   * These are statuses, which are allowed for {@link Actor#SYMPHONY} actor
   */
  private static final Set<Status> SYMPHONY_ALLOWED_STATUSES = ImmutableSet.of(
      Status.PENDING, Status.SUBMITTED, Status.FAILED_SUBMIT, Status.FAILED_RETRY, Status.OK_DISABLED
  );

  /**
   * These are statuses, which are allowed for {@link Actor#MALWARE_SCANNER} actor
   */
  private static final Set<Status> MALWARE_SCANNER_ALLOWED_STATUSES = ImmutableSet.of(
      Status.OK, Status.BAD, Status.UNSCANNABLE, Status.EXPIRED
  );

  /**
   * List of allowed status transitions
   */
  private static final Map<Status, Set<Status>> ALLOWED_STATUS_TRANSITIONS = ImmutableMap.<Status, Set<Status>>builder()
      .put(Status.PENDING, ImmutableSet.of(Status.FAILED_SUBMIT, Status.FAILED_RETRY, Status.SUBMITTED, Status.OK, Status.BAD, Status.UNSCANNABLE))
      .put(Status.OK, ImmutableSet.of(Status.PENDING, Status.EXPIRED))
      .put(Status.BAD, ImmutableSet.of(Status.PENDING, Status.EXPIRED))
      .put(Status.UNSCANNABLE, ImmutableSet.of(Status.PENDING, Status.EXPIRED))
      .put(Status.SUBMITTED, ImmutableSet.of(Status.OK, Status.BAD, Status.UNSCANNABLE))
      .put(Status.FAILED_SUBMIT, ImmutableSet.of(Status.FAILED_RETRY, Status.SUBMITTED))
      .build();

  private static final BiFunction<Status, Actor, MalwareScanException> TRANSFER_TO_STATUS_NOT_ALLOWED_FOR_ACTOR = (status, actor) ->
      new MalwareScanException("Transfer to " + status + " status is not allowed for " + actor + " actor");

  private static final BiFunction<Status, Status, MalwareScanException> TRANSFER_FROM_STATUS_TO_STATUS_NOT_ALLOWED = (fromStatus, toStatus) ->
      new MalwareScanException("Transfer from " + fromStatus + " status to " + toStatus + " status is not allowed");

  private final PersistenceRepository<String, MalwareScanFileState> malwareScanFileStateRepository;
  private final PersistenceRangeRepository<String, Instant, MalwareScanFileState> malwareScanFileStateHistoryRangeRepository;
  private final PersistenceRangeRepository<String, RangeKey, MalwareScanFileMapping> malwareScanFileMappingRangeRepository;
  private final TemporalSupplier<Instant> instantSupplier;

  public MalwarePersistenceService(
      final PersistenceRepository<String, MalwareScanFileState> malwareScanFileStateRepository,
      final PersistenceRangeRepository<String, Instant, MalwareScanFileState> malwareScanFileStateHistoryRangeRepository,
      final PersistenceRangeRepository<String, RangeKey, MalwareScanFileMapping> malwareScanFileMappingRangeRepository,
      final TemporalSupplier<Instant> instantSupplier
  ) {
    this.malwareScanFileStateRepository = malwareScanFileStateRepository;
    this.malwareScanFileStateHistoryRangeRepository = malwareScanFileStateHistoryRangeRepository;
    this.malwareScanFileMappingRangeRepository = malwareScanFileMappingRangeRepository;
    this.instantSupplier = instantSupplier;
  }

  public void putMalwareScanFileState(@Nonnull final MalwareScanFileState newMalwareScanFileState, @Nonnull final Actor actor) throws PersistentException, MalwareScanException {
    final MalwareScanFileState existingMalwareScanFileState = malwareScanFileStateRepository.load(newMalwareScanFileState.getFileId());

    if (Actor.SYMPHONY.equals(actor) && !SYMPHONY_ALLOWED_STATUSES.contains(newMalwareScanFileState.getStatus())) {
      throw TRANSFER_TO_STATUS_NOT_ALLOWED_FOR_ACTOR.apply(newMalwareScanFileState.getStatus(), actor);
    }

    if (Actor.MALWARE_SCANNER.equals(actor) && !MALWARE_SCANNER_ALLOWED_STATUSES.contains(newMalwareScanFileState.getStatus())) {
      throw TRANSFER_TO_STATUS_NOT_ALLOWED_FOR_ACTOR.apply(newMalwareScanFileState.getStatus(), actor);
    }

    MalwareScanFileState mergedMalwareScanFileState;
    if (existingMalwareScanFileState == null) {
      mergedMalwareScanFileState = newMalwareScanFileState.toBuilder()
          .createTimestamp(instantSupplier.now())
          .createdBy(actor)
          .lastUpdateTimestamp(instantSupplier.now())
          .lastUpdatedBy(actor)
          .build();
    } else {
      if (!ALLOWED_STATUS_TRANSITIONS.getOrDefault(existingMalwareScanFileState.getStatus(), ImmutableSet.of()).contains(newMalwareScanFileState.getStatus())) {
        throw TRANSFER_FROM_STATUS_TO_STATUS_NOT_ALLOWED.apply(existingMalwareScanFileState.getStatus(), newMalwareScanFileState.getStatus());
      }

      mergedMalwareScanFileState = existingMalwareScanFileState.toBuilder()
          .status(newMalwareScanFileState.getStatus())
          .ttl(newMalwareScanFileState.getTtl())
          .lastUpdateTimestamp(instantSupplier.now())
          .lastUpdatedBy(actor)
          .build();
    }

    malwareScanFileStateRepository.save(mergedMalwareScanFileState.getFileId(), mergedMalwareScanFileState);
    malwareScanFileStateHistoryRangeRepository.save(mergedMalwareScanFileState.getFileId(), instantSupplier.now(), mergedMalwareScanFileState);
  }

  public Optional<MalwareScanFileState> getMalwareScanFileState(@Nonnull final String fileId) throws PersistentException {
    return Optional.ofNullable(malwareScanFileStateRepository.load(fileId));
  }

  public List<MalwareScanFileState> getMalwareScanFileStates(@Nonnull final String fileId) throws PersistentException {
    return malwareScanFileStateHistoryRangeRepository.loadRange(fileId);
  }

  public List<MalwareScanFileState> getMalwareScanFileStates(@Nonnull final String fileId, @Nonnull final Instant from) throws PersistentException {
    return malwareScanFileStateHistoryRangeRepository.loadRange(fileId, from, instantSupplier.now());
  }

  public List<MalwareScanFileState> getMalwareScanFileStates(@Nonnull final String fileId, @Nonnull final Instant from, @Nonnull final Instant to) throws PersistentException {
    return malwareScanFileStateHistoryRangeRepository.loadRange(fileId, from, to);
  }

  public void putMalwareScanFileMapping(@Nonnull final MalwareScanFileMapping malwareScanFileMapping) throws PersistentException {
    malwareScanFileMappingRangeRepository.save(malwareScanFileMapping.getFileId(),
        new RangeKey(malwareScanFileMapping.getStreamId(), malwareScanFileMapping.getMessageId()), malwareScanFileMapping);
  }

  public List<MalwareScanFileMapping> getMalwareScanFileMappings(
      @Nonnull final String fileId, @Nonnull final String streamId, @Nonnull final String messageId
  ) throws PersistentException {
    return malwareScanFileMappingRangeRepository.loadRange(fileId).stream()
        .filter(mssi -> streamId.equals(mssi.getStreamId())).filter(mssi -> messageId.equals(mssi.getMessageId())).collect(Collectors.toList());
  }
}
