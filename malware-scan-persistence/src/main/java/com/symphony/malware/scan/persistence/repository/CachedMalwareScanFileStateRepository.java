package com.symphony.malware.scan.persistence.repository;

import static java.lang.String.format;
import static java.util.Optional.ofNullable;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.MalwareScanFileState;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import javax.annotation.Nonnull;

/**
 * Returns cached file states if possible, otherwise delegates operations onto {@link MalwareScanFileStateRepository}
 */
@Slf4j
public final class CachedMalwareScanFileStateRepository implements PersistenceRepository<String, MalwareScanFileState> {

  private final MalwareScanFileStateRepository repository;
  private final LoadingCache<String, Optional<MalwareScanFileState>> cache;

    public CachedMalwareScanFileStateRepository(MalwareScanFileStateRepository repository) {
    this.repository = repository;
    this.cache = CacheBuilder.newBuilder()
      .maximumSize(300)
      .expireAfterAccess(3, TimeUnit.HOURS)
      .build(new CacheLoader<String, Optional<MalwareScanFileState>>() {
        @Override
        public Optional<MalwareScanFileState> load(@Nonnull String fileId) throws PersistentException {
          LOGGER.info(format("retrieving latest file state for %s", fileId));
          return ofNullable(repository.load(fileId));
        }
      });
  }

  @Override
  public void save(@Nonnull String key, MalwareScanFileState currentValue,
      @Nonnull MalwareScanFileState newValue) throws PersistentException {
    repository.save(key, currentValue, newValue);
    cache.refresh(key);
  }

  @Override
  public MalwareScanFileState load(@Nonnull String fileId) throws PersistentException {
    try {
      return cache.get(fileId).orElse(null);
    } catch (ExecutionException e) {
      throw new PersistentException(e, "unable to load cached file state or fetch actual state");
    }
  }

}