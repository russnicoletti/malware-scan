package com.symphony.malware.scan.persistence.repository;

import com.symphony.data.infrastructure.IPersistenceInfra;
import com.symphony.data.mapper.IKeyValueTable;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.dto.MalwareInfo;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.CharEncoding;

import java.io.IOException;
import java.nio.charset.Charset;

@Slf4j
public class MalwareInfoPersistenceRepository implements PersistenceRepository<String, MalwareInfo> {

  private static final Charset CHARSET = Charset.forName(CharEncoding.UTF_8);

  private static final String MALWARE_INFO_TABLE = "malwareInfo";

  private final ObjectMapper objectMapper;
  private final IKeyValueTable malwareInfoKeyValueTable;

  public MalwareInfoPersistenceRepository(final IPersistenceInfra persistenceInfra) throws PersistentException {
    this.objectMapper = new ObjectMapper();
    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    this.malwareInfoKeyValueTable = persistenceInfra.getKeyValueTable(MALWARE_INFO_TABLE);
    if (!malwareInfoKeyValueTable.exist()) {
      LOGGER.info("Creating Malware Info table");
      malwareInfoKeyValueTable.createTable();
    }
  }

  public void save(final String fileId, final MalwareInfo malwareInfo) throws PersistentException {
    try {
      malwareInfoKeyValueTable.save(fileId.getBytes(CHARSET),
          objectMapper.writeValueAsString(malwareInfo).getBytes(CHARSET));
    } catch (JsonProcessingException jpe) {
      LOGGER.error("Could not convert object to array of bytes");
      throw new PersistentException(jpe, "Could not convert object to array of bytes");
    }
  }

  public MalwareInfo load(final String fileId) throws PersistentException {
    try {
      return objectMapper.readValue(malwareInfoKeyValueTable.load(fileId.getBytes(CHARSET)), MalwareInfo.class);
    } catch (IOException jpe) {
      LOGGER.error("Could not convert object to array of bytes");
      throw new PersistentException(jpe, "Could not convert array of bytes to object");
    }
  }

}
