package com.symphony.malware.scan.persistence.repository;

import com.symphony.data.infrastructure.IPersistenceInfra;
import com.symphony.data.mapper.IKeyValueTable;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.dto.MalwareInfo;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.CharEncoding;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.function.Supplier;

import javax.annotation.Nonnull;

@Slf4j
public class MalwareInfoPersistenceRepository implements PersistenceRepository<String, MalwareInfo> {

  private static final Charset CHARSET = Charset.forName(CharEncoding.UTF_8);

  private static final String MALWARE_INFO_TABLE = "malwareInfo";

  private final IKeyValueTable malwareInfoKeyValueTable;
  private final Supplier<ObjectMapper> objectMapperSupplier;

  public MalwareInfoPersistenceRepository(final IPersistenceInfra persistenceInfra, final Supplier<ObjectMapper> objectMapperSupplier) throws PersistentException {
    this.malwareInfoKeyValueTable = persistenceInfra.getKeyValueTable(MALWARE_INFO_TABLE);
    if (!malwareInfoKeyValueTable.exist()) {
      LOGGER.info("Creating Malware Info table");
      malwareInfoKeyValueTable.createTable();
    }

    this.objectMapperSupplier = objectMapperSupplier;
  }

  @Override
  public void save(@Nonnull final String fileId, @Nonnull final MalwareInfo malwareInfo) throws PersistentException {
    try {
      malwareInfoKeyValueTable.save(fileId.getBytes(CHARSET), objectMapperSupplier.get().writeValueAsString(malwareInfo).getBytes(CHARSET));
    } catch (JsonProcessingException jpe) {
      throw new PersistentException(jpe, "Could not convert " + MalwareInfo.class.getSimpleName() + " to array of bytes");
    }
  }

  @Override
  public MalwareInfo load(@Nonnull final String fileId) throws PersistentException {
    try {
      final byte[] bytes = malwareInfoKeyValueTable.load(fileId.getBytes(CHARSET));

      if (bytes != null) {
        return objectMapperSupplier.get().readValue(bytes, MalwareInfo.class);
      }

      return null;
    } catch (IOException ioe) {
      if (ioe instanceof PersistentException) {
        throw (PersistentException) ioe;
      }
      throw new PersistentException(ioe, "Could not convert array of bytes to " + MalwareInfo.class.getSimpleName());
    }
  }

}
