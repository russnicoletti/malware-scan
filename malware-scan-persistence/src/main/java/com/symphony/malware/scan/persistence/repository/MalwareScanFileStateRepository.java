package com.symphony.malware.scan.persistence.repository;

import com.symphony.data.infrastructure.IPersistenceInfra;
import com.symphony.data.mapper.IKeyValueTable;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.MalwareScanFileState;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.function.Supplier;

import javax.annotation.Nonnull;

/**
 * Keeps latest malware scan state of the attachments, which were sent to malware scanner
 */
@Slf4j
public class MalwareScanFileStateRepository implements PersistenceRepository<String, MalwareScanFileState> {

  private static final Charset CHARSET = StandardCharsets.UTF_8;

  private static final String MALWARE_SCAN_FILE_STATE_TABLE = "malwareScanFileState";

  private final IKeyValueTable malwareScanFileStateKeyValueTable;
  private final Supplier<ObjectMapper> objectMapperSupplier;

  public MalwareScanFileStateRepository(final IPersistenceInfra persistenceInfra, final Supplier<ObjectMapper> objectMapperSupplier) throws PersistentException {
    this.malwareScanFileStateKeyValueTable = persistenceInfra.getKeyValueTable(MALWARE_SCAN_FILE_STATE_TABLE);
    if (!malwareScanFileStateKeyValueTable.exist()) {
      LOGGER.info("Creating Malware Scan File State table");
      malwareScanFileStateKeyValueTable.createTable();
    }

    this.objectMapperSupplier = objectMapperSupplier;
  }

  @Override
  public void save(@Nonnull final String fileId, @Nonnull final MalwareScanFileState malwareScanFileState) throws PersistentException {
    try {
      malwareScanFileStateKeyValueTable.save(fileId.getBytes(CHARSET), objectMapperSupplier.get().writeValueAsString(malwareScanFileState).getBytes(CHARSET));
    } catch (JsonProcessingException jpe) {
      throw new PersistentException(jpe, "Could not convert " + MalwareScanFileState.class.getSimpleName() + " to array of bytes");
    }
  }

  @Override
  public MalwareScanFileState load(@Nonnull final String fileId) throws PersistentException {
    try {
      final byte[] bytes = malwareScanFileStateKeyValueTable.load(fileId.getBytes(CHARSET));
      if (bytes != null) {
        return objectMapperSupplier.get().readValue(bytes, MalwareScanFileState.class);
      }
      return null;
    } catch (PersistentException pe) {
      throw pe;
    } catch (IOException ioe) {
      throw new PersistentException(ioe, "Could not convert array of bytes to " + MalwareScanFileState.class.getSimpleName());
    }
  }

}
