package com.symphony.malware.scan.persistence.service;

import static com.symphony.malware.scan.dto.MalwareInfo.Status;
import static com.symphony.malware.scan.persistence.repository.MalwareScanMappingRangePersistenceRepository.RangeKey;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.symphony.malware.scan.dto.Actor;
import com.symphony.malware.scan.dto.MalwareInfo;
import com.symphony.malware.scan.dto.MalwareScanMapping;
import com.symphony.malware.scan.persistence.exception.MalwareInfoUpdateException;
import com.symphony.malware.scan.persistence.repository.PersistenceRepository;
import com.symphony.malware.scan.persistence.repository.RangePersistenceRepository;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import util.TemporalSupplier;

import java.time.Instant;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class MalwarePersistenceServiceTest {

  private static final String FILE_ID = "fileId0001";
  private static final String STREAM_ID = "streamId0001";
  private static final String MESSAGE_ID = "messageId0001";

  private static final Instant EPOCH_MILLI_0 = Instant.ofEpochMilli(0L);
  private static final Instant EPOCH_MILLI_1 = Instant.ofEpochMilli(1L);

  @Mock
  private PersistenceRepository<String, MalwareInfo> malwareInfoPersistenceRepository;

  @Mock
  private RangePersistenceRepository<String, Instant, MalwareInfo> malwareInfoHistoRangePersistenceRepository;

  @Mock
  private RangePersistenceRepository<String, RangeKey, MalwareScanMapping> malwareScanMappingRangePersistenceRepository;

  @Mock
  private TemporalSupplier<Instant> instantSupplier;

  private MalwarePersistenceService malwarePersistenceService;

  @Before
  public void before() {
    when(instantSupplier.now()).thenReturn(EPOCH_MILLI_1);

    malwarePersistenceService = new MalwarePersistenceService(malwareInfoPersistenceRepository, malwareInfoHistoRangePersistenceRepository,
        malwareScanMappingRangePersistenceRepository, instantSupplier);
  }

  @Test
  public void putMalwareInfo_newMalwareInfoActorIsSymphony_malwareInfoPut() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).status(Status.PENDING).build();

    when(malwareInfoPersistenceRepository.load(FILE_ID)).thenReturn(null);

    malwarePersistenceService.putMalwareInfo(malwareInfo, Actor.SYMPHONY);

    final ArgumentCaptor<MalwareInfo> malwareInfoPersist = ArgumentCaptor.forClass(MalwareInfo.class);
    verify(malwareInfoPersistenceRepository, times(1)).save(eq(FILE_ID), malwareInfoPersist.capture());
    assertThat(malwareInfoPersist.getValue().getFileId()).isEqualTo(FILE_ID);
    assertThat(malwareInfoPersist.getValue().getStatus()).isEqualTo(Status.PENDING);
    assertThat(malwareInfoPersist.getValue().getCreateTimestamp()).isEqualTo(EPOCH_MILLI_1);
    assertThat(malwareInfoPersist.getValue().getCreatedBy()).isEqualTo(Actor.SYMPHONY);
    assertThat(malwareInfoPersist.getValue().getLastUpdateTimestamp()).isEqualTo(EPOCH_MILLI_1);
    assertThat(malwareInfoPersist.getValue().getLastUpdatedBy()).isEqualTo(Actor.SYMPHONY);

    final ArgumentCaptor<MalwareInfo> malwareInfoHistoPersist = ArgumentCaptor.forClass(MalwareInfo.class);
    verify(malwareInfoHistoRangePersistenceRepository, times(1)).save(eq(FILE_ID), eq(EPOCH_MILLI_1), malwareInfoHistoPersist.capture());
    assertThat(malwareInfoHistoPersist.getValue().getFileId()).isEqualTo(FILE_ID);
    assertThat(malwareInfoHistoPersist.getValue().getStatus()).isEqualTo(Status.PENDING);
    assertThat(malwareInfoHistoPersist.getValue().getCreateTimestamp()).isEqualTo(EPOCH_MILLI_1);
    assertThat(malwareInfoHistoPersist.getValue().getCreatedBy()).isEqualTo(Actor.SYMPHONY);
    assertThat(malwareInfoHistoPersist.getValue().getLastUpdateTimestamp()).isEqualTo(EPOCH_MILLI_1);
    assertThat(malwareInfoHistoPersist.getValue().getLastUpdatedBy()).isEqualTo(Actor.SYMPHONY);
  }

  @Test
  public void putMalwareInfo_newMalwareInfoActorIsMalwareScanner_exceptonThrown() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).status(Status.PENDING).build();

    when(malwareInfoPersistenceRepository.load(FILE_ID)).thenReturn(null);

    assertThatThrownBy(() -> malwarePersistenceService.putMalwareInfo(malwareInfo, Actor.MALWARE_SCANNER))
        .isInstanceOf(MalwareInfoUpdateException.class)
        .hasMessage("Transfer to PENDING status is not allowed for MALWARE_SCANNER actor");

    verify(malwareInfoPersistenceRepository, times(0)).save(any(String.class), any(MalwareInfo.class));
    verify(malwareInfoHistoRangePersistenceRepository, times(0)).save(any(String.class), any(Instant.class), any(MalwareInfo.class));
  }

  @Test
  public void putMalwareInfo_existingMalwareInfoPendingToSubmittedActorIsSymphony_malwareInfoPut() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).status(Status.SUBMITTED).build();

    when(malwareInfoPersistenceRepository.load(FILE_ID)).thenReturn(malwareInfo.toBuilder().status(Status.PENDING)
        .createTimestamp(EPOCH_MILLI_0).createdBy(Actor.SYMPHONY).build());

    malwarePersistenceService.putMalwareInfo(malwareInfo, Actor.SYMPHONY);

    final ArgumentCaptor<MalwareInfo> malwareInfoPersist = ArgumentCaptor.forClass(MalwareInfo.class);
    verify(malwareInfoPersistenceRepository, times(1)).save(eq(FILE_ID), malwareInfoPersist.capture());
    assertThat(malwareInfoPersist.getValue().getFileId()).isEqualTo(FILE_ID);
    assertThat(malwareInfoPersist.getValue().getStatus()).isEqualTo(Status.SUBMITTED);
    assertThat(malwareInfoPersist.getValue().getCreateTimestamp()).isEqualTo(EPOCH_MILLI_0);
    assertThat(malwareInfoPersist.getValue().getCreatedBy()).isEqualTo(Actor.SYMPHONY);
    assertThat(malwareInfoPersist.getValue().getLastUpdateTimestamp()).isEqualTo(EPOCH_MILLI_1);
    assertThat(malwareInfoPersist.getValue().getLastUpdatedBy()).isEqualTo(Actor.SYMPHONY);

    final ArgumentCaptor<MalwareInfo> malwareInfoHistoPersist = ArgumentCaptor.forClass(MalwareInfo.class);
    verify(malwareInfoHistoRangePersistenceRepository, times(1)).save(eq(FILE_ID), eq(EPOCH_MILLI_1), malwareInfoHistoPersist.capture());
    assertThat(malwareInfoHistoPersist.getValue().getFileId()).isEqualTo(FILE_ID);
    assertThat(malwareInfoHistoPersist.getValue().getStatus()).isEqualTo(Status.SUBMITTED);
    assertThat(malwareInfoHistoPersist.getValue().getCreateTimestamp()).isEqualTo(EPOCH_MILLI_0);
    assertThat(malwareInfoHistoPersist.getValue().getCreatedBy()).isEqualTo(Actor.SYMPHONY);
    assertThat(malwareInfoHistoPersist.getValue().getLastUpdateTimestamp()).isEqualTo(EPOCH_MILLI_1);
    assertThat(malwareInfoHistoPersist.getValue().getLastUpdatedBy()).isEqualTo(Actor.SYMPHONY);
  }

  @Test
  public void putMalwareInfo_existingMalwareInfoSubmittedToFailedSubmit_exceptionThrown() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).status(Status.FAILED_SUBMIT).build();

    when(malwareInfoPersistenceRepository.load(FILE_ID)).thenReturn(malwareInfo.toBuilder().status(Status.SUBMITTED)
        .createTimestamp(EPOCH_MILLI_0).createdBy(Actor.SYMPHONY).build());

    assertThatThrownBy(() -> malwarePersistenceService.putMalwareInfo(malwareInfo, Actor.SYMPHONY))
        .isInstanceOf(MalwareInfoUpdateException.class)
        .hasMessage("Transfer from SUBMITTED status to FAILED_SUBMIT status is not allowed");

    verify(malwareInfoPersistenceRepository, times(0)).save(any(String.class), any(MalwareInfo.class));
    verify(malwareInfoHistoRangePersistenceRepository, times(0)).save(any(String.class), any(Instant.class), any(MalwareInfo.class));
  }

  @Test
  public void putMalwareInfo_existingMalwareInfoSubmittedToOkActorIsSymphony_exceptionThrown() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).status(Status.OK).build();

    when(malwareInfoPersistenceRepository.load(FILE_ID)).thenReturn(malwareInfo.toBuilder().status(Status.SUBMITTED)
        .createTimestamp(EPOCH_MILLI_0).createdBy(Actor.SYMPHONY).build());

    assertThatThrownBy(() -> malwarePersistenceService.putMalwareInfo(malwareInfo, Actor.SYMPHONY))
        .isInstanceOf(MalwareInfoUpdateException.class)
        .hasMessage("Transfer to OK status is not allowed for SYMPHONY actor");

    verify(malwareInfoPersistenceRepository, times(0)).save(any(String.class), any(MalwareInfo.class));
    verify(malwareInfoHistoRangePersistenceRepository, times(0)).save(any(String.class), any(Instant.class), any(MalwareInfo.class));
  }

  @Test
  public void getMalwareInfo_malwareInfoExists_malwareInfoReturned() throws Exception {
    when(malwareInfoPersistenceRepository.load(FILE_ID)).thenReturn(MalwareInfo.builder().fileId(FILE_ID)
        .status(Status.SUBMITTED).createTimestamp(EPOCH_MILLI_0).createdBy(Actor.SYMPHONY).build());

    assertThat(malwarePersistenceService.getMalwareInfo(FILE_ID)).isNotEmpty();

    verify(malwareInfoPersistenceRepository, times(1)).load(eq(FILE_ID));
  }

  @Test
  public void getMalwareInfo_malwareInfoDoesNotExist_emptyOptionalReturned() throws Exception {
    when(malwareInfoPersistenceRepository.load(FILE_ID)).thenReturn(null);

    assertThat(malwarePersistenceService.getMalwareInfo(FILE_ID)).isEmpty();

    verify(malwareInfoPersistenceRepository, times(1)).load(eq(FILE_ID));
  }

  @Test
  public void getMalwareInfos_byFileId_malwareInfosReturned() throws Exception {
    when(malwareInfoHistoRangePersistenceRepository.loadRange(FILE_ID)).thenReturn(
        ImmutableList.of(
            MalwareInfo.builder().fileId(FILE_ID).status(Status.SUBMITTED).createTimestamp(EPOCH_MILLI_0).createdBy(Actor.SYMPHONY).build()
        )
    );

    assertThat(malwarePersistenceService.getMalwareInfos(FILE_ID)).extracting(MalwareInfo::getFileId).containsExactly(FILE_ID);

    verify(instantSupplier, times(0)).now();
    verify(malwareInfoHistoRangePersistenceRepository, times(1)).loadRange(eq(FILE_ID));
  }

  @Test
  public void getMalwareInfos_byFileIdAndFrom_malwareInfosReturned() throws Exception {
    when(malwareInfoHistoRangePersistenceRepository.loadRange(FILE_ID, EPOCH_MILLI_0, EPOCH_MILLI_1)).thenReturn(
        ImmutableList.of(
            MalwareInfo.builder().fileId(FILE_ID).status(Status.SUBMITTED).createTimestamp(EPOCH_MILLI_0).createdBy(Actor.SYMPHONY).build()
        )
    );

    assertThat(malwarePersistenceService.getMalwareInfos(FILE_ID, EPOCH_MILLI_0)).extracting(MalwareInfo::getFileId).containsExactly(FILE_ID);

    verify(instantSupplier, times(1)).now();
    verify(malwareInfoHistoRangePersistenceRepository, times(1)).loadRange(eq(FILE_ID), eq(EPOCH_MILLI_0), eq(EPOCH_MILLI_1));
  }

  @Test
  public void getMalwareInfos_byFileIdAndFromAndTo_malwareInfosReturned() throws Exception {
    when(malwareInfoHistoRangePersistenceRepository.loadRange(FILE_ID, EPOCH_MILLI_0, EPOCH_MILLI_1)).thenReturn(
        ImmutableList.of(
            MalwareInfo.builder().fileId(FILE_ID).status(Status.SUBMITTED).createTimestamp(EPOCH_MILLI_0).createdBy(Actor.SYMPHONY).build()
        )
    );

    assertThat(malwarePersistenceService.getMalwareInfos(FILE_ID, EPOCH_MILLI_0, EPOCH_MILLI_1)).extracting(MalwareInfo::getFileId).containsExactly(FILE_ID);

    verify(instantSupplier, times(0)).now();
    verify(malwareInfoHistoRangePersistenceRepository, times(1)).loadRange(eq(FILE_ID), eq(EPOCH_MILLI_0), eq(EPOCH_MILLI_1));
  }

  @Test
  public void putMalwareScanMapping_malwareScanMappingPut() throws Exception {
    final MalwareScanMapping malwareScanMapping = MalwareScanMapping.builder().fileId(FILE_ID).streamId(STREAM_ID).messageId(MESSAGE_ID).build();

    malwarePersistenceService.putMalwareScanMapping(malwareScanMapping);

    final ArgumentCaptor<RangeKey> argumentCaptor = ArgumentCaptor.forClass(RangeKey.class);
    verify(malwareScanMappingRangePersistenceRepository, times(1)).save(eq(FILE_ID), argumentCaptor.capture(), eq(malwareScanMapping));

    assertThat(argumentCaptor.getValue().getStreamId()).isEqualTo(STREAM_ID);
    assertThat(argumentCaptor.getValue().getMessageId()).isEqualTo(MESSAGE_ID);
  }

  @Test
  public void getMalwareScanMapping_malwareScanStateInfosReturned() throws Exception {
    when(malwareScanMappingRangePersistenceRepository.loadRange(FILE_ID)).thenReturn(
        ImmutableList.of(
            MalwareScanMapping.builder().fileId(FILE_ID).streamId(STREAM_ID).messageId(MESSAGE_ID).build(),
            MalwareScanMapping.builder().fileId(FILE_ID).streamId(STREAM_ID + "1").messageId(MESSAGE_ID + "1").build(),
            MalwareScanMapping.builder().fileId(FILE_ID).streamId(STREAM_ID + "2").messageId(MESSAGE_ID + "2").build()
        )
    );

    final List<MalwareScanMapping> malwareScanMappings = malwarePersistenceService.getMalwareScanMapping(FILE_ID, STREAM_ID, MESSAGE_ID);

    verify(malwareScanMappingRangePersistenceRepository, times(1)).loadRange(FILE_ID);

    assertThat(malwareScanMappings).hasSize(1);
    assertThat(malwareScanMappings.get(0).getFileId()).isEqualTo(FILE_ID);
    assertThat(malwareScanMappings.get(0).getStreamId()).isEqualTo(STREAM_ID);
    assertThat(malwareScanMappings.get(0).getMessageId()).isEqualTo(MESSAGE_ID);
  }

}
