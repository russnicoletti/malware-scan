package com.symphony.malware.scan.persistence.repository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.symphony.data.infrastructure.IPersistenceInfra;
import com.symphony.data.mapper.IKeyValueTable;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.MalwareScanFileState;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.CharEncoding;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.Closeable;
import java.nio.charset.Charset;
import java.util.function.Supplier;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanFileStateRepositoryTest {

  private static final Charset CHARSET = Charset.forName(CharEncoding.UTF_8);
  private static final String MALWARE_SCAN_FILE_STATE_TABLE = "malwareScanFileState";

  private static final String FILE_ID = "fileId0001";

  @Mock
  private IPersistenceInfra persistenceInfra;

  @Mock
  private Supplier<ObjectMapper> objectMapperSupplier;

  @Mock
  private ObjectMapper objectMapper;

  @Mock
  private IKeyValueTable malwareScanFileStateKeyValueTable;

  @Mock
  private Closeable closeable;

  @Before
  public void before() throws Exception {
    when(objectMapperSupplier.get()).thenReturn(objectMapper);
    when(persistenceInfra.getKeyValueTable(MALWARE_SCAN_FILE_STATE_TABLE)).thenReturn(malwareScanFileStateKeyValueTable);
  }

  @Test
  public void createRepository_malwareScanFileStateTableExists_createTableNotCalled() throws Exception {
    when(malwareScanFileStateKeyValueTable.exist()).thenReturn(Boolean.TRUE);

    new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier);

    verify(malwareScanFileStateKeyValueTable, times(0)).createTable();
  }

  @Test
  public void createRepository_malwareScanFileStateTableDoesNotExist_createTableCalled() throws Exception {
    when(malwareScanFileStateKeyValueTable.exist()).thenReturn(Boolean.FALSE);

    new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier);

    verify(malwareScanFileStateKeyValueTable, times(1)).createTable();
  }

  @Test
  public void save_noException_malwareScanFileStatePut() throws Exception {
    final MalwareScanFileState malwareScanFileState = MalwareScanFileState.builder().fileId(FILE_ID).build();

    when(objectMapper.writeValueAsString(malwareScanFileState)).thenReturn("{}");
    new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier).save(FILE_ID, malwareScanFileState);

    verify(objectMapper, times(1)).writeValueAsString(malwareScanFileState);
    verify(malwareScanFileStateKeyValueTable, times(1)).save(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class));
  }

  @Test
  public void save_jsonProcessingException_persistentExceptionThrown() throws Exception {
    final MalwareScanFileState malwareScanFileState = MalwareScanFileState.builder().fileId(FILE_ID).build();

    when(objectMapper.writeValueAsString(malwareScanFileState)).thenThrow(new JsonMappingException(closeable, "JSON Mapping Exception"));

    assertThatThrownBy(() -> new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier)
        .save(FILE_ID, malwareScanFileState)).isInstanceOf(PersistentException.class)
        .hasMessage("com.fasterxml.jackson.databind.JsonMappingException: JSON Mapping Exception");

    verify(objectMapper, times(1)).writeValueAsString(any(MalwareScanFileState.class));
    verify(malwareScanFileStateKeyValueTable, times(0)).save(any(byte[].class), any(byte[].class));
  }

  @Test
  public void load_valueIsNotNull_malwareScanFileStateReturned() throws Exception {
    final MalwareScanFileState malwareScanFileState = MalwareScanFileState.builder().fileId(FILE_ID).build();
    final byte[] malwareScanFileStateBytes = ("{\"fileId\":\"" + FILE_ID + "\"}").getBytes(CHARSET);

    when(malwareScanFileStateKeyValueTable.load(FILE_ID.getBytes(CHARSET))).thenReturn(malwareScanFileStateBytes);
    when(objectMapper.readValue(malwareScanFileStateBytes, MalwareScanFileState.class)).thenReturn(malwareScanFileState);

    final MalwareScanFileState returnedMalwareScanFileState = new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier).load(FILE_ID);

    assertThat(returnedMalwareScanFileState).isNotNull();
    assertThat(returnedMalwareScanFileState.getFileId()).isEqualTo(malwareScanFileState.getFileId());

    verify(malwareScanFileStateKeyValueTable, times(1)).load(FILE_ID.getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareScanFileStateBytes, MalwareScanFileState.class);
  }

  @Test
  public void load_valueIsNull_malwareScanFileStateReturned() throws Exception {
    when(malwareScanFileStateKeyValueTable.load(FILE_ID.getBytes(CHARSET))).thenReturn(null);

    final MalwareScanFileState returnedMalwareScanFileState = new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier).load(FILE_ID);

    assertThat(returnedMalwareScanFileState).isNull();

    verify(malwareScanFileStateKeyValueTable, times(1)).load(FILE_ID.getBytes(CHARSET));
    verify(objectMapper, times(0)).readValue(any(byte[].class), eq(MalwareScanFileState.class));
  }

  @Test
  public void load_jsonProcessingException_persistentExceptionThrown() throws Exception {
    final byte[] malwareScanFileStateBytes = ("{\"fileId\":\"" + FILE_ID + "\"}").getBytes(CHARSET);

    when(malwareScanFileStateKeyValueTable.load(FILE_ID.getBytes(CHARSET))).thenReturn(malwareScanFileStateBytes);
    when(objectMapper.readValue(malwareScanFileStateBytes, MalwareScanFileState.class)).thenThrow(new JsonMappingException(closeable, "JSON Mapping Exception"));

    assertThatThrownBy(() -> new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier)
        .load(FILE_ID)).isInstanceOf(PersistentException.class)
        .hasMessage("com.fasterxml.jackson.databind.JsonMappingException: JSON Mapping Exception");

    verify(malwareScanFileStateKeyValueTable, times(1)).load(FILE_ID.getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareScanFileStateBytes, MalwareScanFileState.class);
  }

  @Test
  public void load_persistentException_persistentExceptionRethrown() throws Exception {
    when(malwareScanFileStateKeyValueTable.load(FILE_ID.getBytes(CHARSET))).thenThrow(new PersistentException("Failed to load", ""));

    assertThatThrownBy(() -> new MalwareScanFileStateRepository(persistenceInfra, objectMapperSupplier)
        .load(FILE_ID)).isInstanceOf(PersistentException.class)
        .hasMessage("Failed to load");

    verify(malwareScanFileStateKeyValueTable, times(1)).load(FILE_ID.getBytes(CHARSET));
    verify(objectMapper, times(0)).readValue(any(byte[].class), eq(MalwareScanFileState.class));
  }

}
