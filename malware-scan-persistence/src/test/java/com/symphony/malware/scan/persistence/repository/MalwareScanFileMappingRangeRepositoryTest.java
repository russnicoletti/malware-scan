package com.symphony.malware.scan.persistence.repository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.symphony.data.infrastructure.IPersistenceInfra;
import com.symphony.data.mapper.IPaginatedIterable;
import com.symphony.data.mapper.IRangeTable;
import com.symphony.data.mapper.IResult;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.MalwareScanFileMapping;
import com.symphony.malware.scan.persistence.repository.MalwareScanFileMappingRangeRepository.RangeKey;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.CharEncoding;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import util.TemporalSupplier;

import java.io.Closeable;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.List;
import java.util.function.Supplier;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanFileMappingRangeRepositoryTest {

  private static final Charset CHARSET = Charset.forName(CharEncoding.UTF_8);
  private static final String MALWARE_SCAN_FILE_MAPPING_TABLE = "malwareScanFileMapping";

  private static final String FILE_ID = "fileId0001";
  private static final String STREAM_ID_FROM = "streamIdFrom0001";
  private static final String MESSAGE_ID_FROM = "messageIdFrom0001";
  private static final String STREAM_ID_TO = "streamIdTo0001";
  private static final String MESSAGE_ID_TO = "messageIdTo0001";
  private static final Long EPOCH_MILLI_0 = 0L;
  private static final Long EPOCH_MILLI_1 = 1L;

  @Mock
  private IPersistenceInfra persistenceInfra;

  @Mock
  private TemporalSupplier<Long> timestampSupplier;

  @Mock
  private Supplier<ObjectMapper> objectMapperSupplier;

  @Mock
  private ObjectMapper objectMapper;

  @Mock
  private IRangeTable malwareScanFileMappingRangeTable;

  @Mock
  private Closeable closeable;

  @Mock
  private IPaginatedIterable<IResult> resultPaginatedIterable;

  @Mock
  private Iterator<IResult> resultIterator;

  @Mock
  private IResult result;

  @Before
  public void before() throws Exception {
    when(timestampSupplier.min()).thenReturn(EPOCH_MILLI_0);
    when(timestampSupplier.now()).thenReturn(EPOCH_MILLI_1);
    when(objectMapperSupplier.get()).thenReturn(objectMapper);
    when(persistenceInfra.getRangeTable(MALWARE_SCAN_FILE_MAPPING_TABLE)).thenReturn(malwareScanFileMappingRangeTable);
  }

  @Test
  public void createRepository_malwareScanFileMappingTableExists_createTableNotCalled() throws Exception {
    new MalwareScanFileMappingRangeRepository(persistenceInfra, timestampSupplier, objectMapperSupplier);

    verify(malwareScanFileMappingRangeTable, times(0)).createTable();
  }

  @Test
  public void save_noException_malwareScanFileMappingPut() throws Exception {
    final RangeKey rangeKey = new RangeKey();
    final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder().fileId(FILE_ID).build();

    when(objectMapper.writeValueAsString(malwareScanFileMapping)).thenReturn("{}");
    new MalwareScanFileMappingRangeRepository(persistenceInfra, timestampSupplier, objectMapperSupplier).save(FILE_ID, rangeKey, malwareScanFileMapping);

    verify(objectMapper, times(1)).writeValueAsString(malwareScanFileMapping);
    verify(malwareScanFileMappingRangeTable, times(1)).save(eq(FILE_ID.getBytes(CHARSET)), eq((Long.toString(1L) + rangeKey).getBytes(CHARSET)), any(byte[].class));
  }

  @Test
  public void save_jsonProcessingException_persistentExceptionThrown() throws Exception {
    final RangeKey rangeKey = new RangeKey(STREAM_ID_FROM, MESSAGE_ID_FROM);
    final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder().fileId(FILE_ID).build();

    when(objectMapper.writeValueAsString(malwareScanFileMapping)).thenThrow(new JsonMappingException(closeable, "JSON Mapping Exception"));

    assertThatThrownBy(() -> new MalwareScanFileMappingRangeRepository(persistenceInfra,
        timestampSupplier, objectMapperSupplier)
        .save(FILE_ID, rangeKey, malwareScanFileMapping)).isInstanceOf(PersistentException.class)
        .hasMessage("com.fasterxml.jackson.databind.JsonMappingException: JSON Mapping Exception");

    verify(objectMapper, times(1)).writeValueAsString(any(MalwareScanFileMapping.class));
    verify(malwareScanFileMappingRangeTable, times(0)).save(any(byte[].class), any(byte[].class), any(byte[].class));
  }

  @Test
  public void loadRange_byFileId_malwareScanFileMappingsReturned() throws Exception {
    final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder().fileId(FILE_ID).build();
    final byte[] malwareScanFileMappingBytes = ("{\"fileId\":\"" + FILE_ID + "\",\"streamId\":\"" + STREAM_ID_FROM + "\",\"fileId\":\"" + MESSAGE_ID_FROM + "\"}").getBytes(CHARSET);

    when(malwareScanFileMappingRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareScanFileMappingBytes);
    when(objectMapper.readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class)).thenReturn(malwareScanFileMapping);

    final List<MalwareScanFileMapping> malwareScanFileMappings = new MalwareScanFileMappingRangeRepository(persistenceInfra,
        timestampSupplier, objectMapperSupplier)
        .loadRange(FILE_ID);

    assertThat(malwareScanFileMappings).hasSize(1);
    assertThat(malwareScanFileMappings.get(0).getFileId()).isEqualTo(FILE_ID);

    verify(malwareScanFileMappingRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class);
    verify(timestampSupplier, times(1)).min();
    verify(timestampSupplier, times(1)).now();
  }

  @Test
  public void loadRange_byFileIdAndFrom_malwareScanFileMappingsReturned() throws Exception {
    final RangeKey fromRangeKey = new RangeKey(STREAM_ID_FROM, MESSAGE_ID_FROM);
    final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder().fileId(FILE_ID).build();
    final byte[] malwareScanFileMappingBytes = ("{\"fileId\":\"" + FILE_ID + "\",\"streamId\":\"" + STREAM_ID_FROM + "\",\"fileId\":\"" + MESSAGE_ID_FROM + "\"}").getBytes(CHARSET);

    when(malwareScanFileMappingRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareScanFileMappingBytes);
    when(objectMapper.readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class)).thenReturn(malwareScanFileMapping);

    final List<MalwareScanFileMapping> malwareScanFileMappings = new MalwareScanFileMappingRangeRepository(persistenceInfra,
        timestampSupplier, objectMapperSupplier)
        .loadRange(FILE_ID, fromRangeKey);

    assertThat(malwareScanFileMappings).hasSize(1);
    assertThat(malwareScanFileMappings.get(0).getFileId()).isEqualTo(FILE_ID);

    verify(malwareScanFileMappingRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), (Long.toString(EPOCH_MILLI_0) + fromRangeKey).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class);
    verify(timestampSupplier, times(1)).min();
    verify(timestampSupplier, times(1)).now();
  }

  @Test
  public void loadRange_byFileIdAndFromAndTo_malwareScanFileMappingsReturned() throws Exception {
    final RangeKey fromRangeKey = new RangeKey(STREAM_ID_FROM, MESSAGE_ID_FROM);
    final RangeKey toRangeKey = new RangeKey(STREAM_ID_TO, MESSAGE_ID_TO);
    final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder().fileId(FILE_ID).build();
    final byte[] malwareScanFileMappingBytes = ("{\"fileId\":\"" + FILE_ID + "\",\"streamId\":\"" + STREAM_ID_FROM + "\",\"fileId\":\"" + MESSAGE_ID_FROM + "\"}").getBytes(CHARSET);

    when(malwareScanFileMappingRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareScanFileMappingBytes);
    when(objectMapper.readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class)).thenReturn(malwareScanFileMapping);

    final List<MalwareScanFileMapping> malwareScanFileMappings = new MalwareScanFileMappingRangeRepository(persistenceInfra,
        timestampSupplier, objectMapperSupplier)
        .loadRange(FILE_ID, fromRangeKey, toRangeKey);

    assertThat(malwareScanFileMappings).hasSize(1);
    assertThat(malwareScanFileMappings.get(0).getFileId()).isEqualTo(FILE_ID);

    verify(malwareScanFileMappingRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), (Long.toString(EPOCH_MILLI_0) + fromRangeKey).getBytes(CHARSET),
        (Long.toString(EPOCH_MILLI_1) + toRangeKey).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class);
    verify(timestampSupplier, times(1)).min();
    verify(timestampSupplier, times(1)).now();
  }

  @Test
  public void loadRange_jsonProcessingException_persistentExceptionThrown() throws Exception {
    final byte[] malwareScanFileMappingBytes = ("{\"fileId\":\"" + FILE_ID + "\",\"streamId\":\"" + STREAM_ID_FROM + "\",\"fileId\":\"" + MESSAGE_ID_FROM + "\"}").getBytes(CHARSET);

    when(malwareScanFileMappingRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareScanFileMappingBytes);
    when(objectMapper.readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class)).thenThrow(new JsonMappingException(closeable, "JSON Mapping Exception"));

    assertThatThrownBy(() -> new MalwareScanFileMappingRangeRepository(persistenceInfra,
        timestampSupplier, objectMapperSupplier)
        .loadRange(FILE_ID)).isInstanceOf(PersistentException.class)
        .hasMessage("com.fasterxml.jackson.databind.JsonMappingException: JSON Mapping Exception");

    verify(malwareScanFileMappingRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareScanFileMappingBytes, MalwareScanFileMapping.class);
    verify(timestampSupplier, times(1)).min();
    verify(timestampSupplier, times(1)).now();
  }

  @Test
  public void loadRange_persistentException_persistentExceptionRethrown() throws Exception {
    when(malwareScanFileMappingRangeTable.batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1).getBytes(CHARSET))).thenThrow(new PersistentException("Failed to load batch", ""));

    assertThatThrownBy(() -> new MalwareScanFileMappingRangeRepository(persistenceInfra,
        timestampSupplier, objectMapperSupplier)
        .loadRange(FILE_ID)).isInstanceOf(PersistentException.class)
        .hasMessage("Failed to load batch");

    verify(malwareScanFileMappingRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1).getBytes(CHARSET));
    verify(objectMapper, times(0)).readValue(any(byte[].class), eq(MalwareScanFileMapping.class));
    verify(timestampSupplier, times(1)).min();
    verify(timestampSupplier, times(1)).now();
  }

}
