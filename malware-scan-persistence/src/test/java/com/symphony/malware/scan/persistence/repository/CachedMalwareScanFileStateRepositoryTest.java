package com.symphony.malware.scan.persistence.repository;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.MalwareScanFileState;
import com.symphony.malware.scan.persistence.util.MalwareScanFileStateCache;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CachedMalwareScanFileStateRepositoryTest {

  @Mock
  private MalwareScanFileStateRepository repository;

  @Mock
  private MalwareScanFileStateCache malwareScanFileStateCache;

  private static final String FILE_ID = "fileId";

  @Test
  public void loadsNullOnEmptyCacheAndNoDataInRepository() throws PersistentException {
    assertNull(new CachedMalwareScanFileStateRepository(repository, malwareScanFileStateCache).load(FILE_ID));
    verify(malwareScanFileStateCache, times(1)).get(FILE_ID);
    verify(repository, times(1)).load(FILE_ID);
    verify(malwareScanFileStateCache, times(0)).put(anyString(), any(MalwareScanFileState.class));
  }

  @Test
  public void loadsFromRepositorOnEmptyCache() throws PersistentException {
    MalwareScanFileState expected = MalwareScanFileState.builder().fileId(FILE_ID).status(MalwareScanFileState.Status.EXPIRED).build();
    when(repository.load(FILE_ID)).thenReturn(expected);
    assertEquals(new CachedMalwareScanFileStateRepository(repository, malwareScanFileStateCache).load(FILE_ID), expected);
    verify(malwareScanFileStateCache, times(1)).get(FILE_ID);
    verify(repository, times(1)).load(FILE_ID);
    verify(malwareScanFileStateCache, times(1)).put(FILE_ID, expected);
  }

  @Test
  public void loadsCachedValue() throws PersistentException {
    MalwareScanFileState expected = MalwareScanFileState.builder().fileId(FILE_ID).status(MalwareScanFileState.Status.EXPIRED).build();
    when(malwareScanFileStateCache.get(FILE_ID)).thenReturn(null).thenReturn(expected);
    CachedMalwareScanFileStateRepository impl = new CachedMalwareScanFileStateRepository(repository, malwareScanFileStateCache);
    impl.load(FILE_ID);
    impl.load(FILE_ID);
    verify(malwareScanFileStateCache, times(2)).get(FILE_ID);
  }

  @Test
  public void cacheSharedAcrossObjects() throws PersistentException {
    MalwareScanFileState expected = MalwareScanFileState.builder().fileId(FILE_ID).status(MalwareScanFileState.Status.EXPIRED).build();
    when(malwareScanFileStateCache.get(FILE_ID)).thenReturn(null).thenReturn(expected);
    new CachedMalwareScanFileStateRepository(repository, malwareScanFileStateCache).load(FILE_ID);
    new CachedMalwareScanFileStateRepository(repository, malwareScanFileStateCache).load(FILE_ID);
    verify(malwareScanFileStateCache, times(2)).get(FILE_ID);
  }

  @Test
  public void cacheGetsInvalidatedOnSave() throws PersistentException {
    MalwareScanFileState currentValue = MalwareScanFileState.builder().fileId(FILE_ID).status(MalwareScanFileState.Status.EXPIRED).build();
    MalwareScanFileState newValue = MalwareScanFileState.builder().fileId("file_id2").status(MalwareScanFileState.Status.BAD).build();
    when(malwareScanFileStateCache.get(FILE_ID)).thenReturn(null).thenReturn(newValue);
    CachedMalwareScanFileStateRepository impl = new CachedMalwareScanFileStateRepository(repository, malwareScanFileStateCache);
    impl.load(FILE_ID);
    impl.save(FILE_ID, currentValue, newValue);
    MalwareScanFileState actual = impl.load(FILE_ID);
    verify(repository, times(1)).save(FILE_ID, currentValue, newValue);
    assertEquals(newValue, actual);
    verify(malwareScanFileStateCache, times(2)).get(FILE_ID);
    verify(malwareScanFileStateCache, times(1)).remove(FILE_ID);
  }
}
