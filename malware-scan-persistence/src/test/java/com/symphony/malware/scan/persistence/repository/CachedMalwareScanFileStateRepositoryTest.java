package com.symphony.malware.scan.persistence.repository;

import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.model.MalwareScanFileState;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertNull;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CachedMalwareScanFileStateRepositoryTest {

  @Mock
  private MalwareScanFileStateRepository repository;

  @Test
  public void loadsNullOnEmptyCacheAndNoDataInRepository() throws PersistentException {
    assertNull(new CachedMalwareScanFileStateRepository(repository).load("some-id"));
  }

  @Test
  public void loadsLatestFromRepositoryOnEmptyCache() throws PersistentException {
    MalwareScanFileState expected = MalwareScanFileState.builder().fileId("result-for-some-id").status(MalwareScanFileState.Status.EXPIRED).build();
    when(repository.load("some-id")).thenReturn(expected);
    assertEquals(expected, new CachedMalwareScanFileStateRepository(repository).load("some-id"));
  }

  @Test
  public void loadsCachedValue() throws PersistentException {
    MalwareScanFileState expected = MalwareScanFileState.builder().fileId("result-for-some-id").status(MalwareScanFileState.Status.EXPIRED).build();
    when(repository.load("some-id")).thenReturn(expected);
    CachedMalwareScanFileStateRepository impl = new CachedMalwareScanFileStateRepository(repository);
    impl.load("some-id");
    impl.load("some-id");
    verify(repository, times(1)).load("some-id");
  }

  @Test
  public void cacheBelongsToTheObject() throws PersistentException {
    MalwareScanFileState expected = MalwareScanFileState.builder().fileId("result-for-some-id").status(MalwareScanFileState.Status.EXPIRED).build();
    when(repository.load("some-id")).thenReturn(expected);
    new CachedMalwareScanFileStateRepository(repository).load("some-id");
    new CachedMalwareScanFileStateRepository(repository).load("some-id");
    verify(repository, times(2)).load("some-id");
  }

  @Test
  public void cacheGetsUpdatedOnSave() throws PersistentException {
    MalwareScanFileState expected1 = MalwareScanFileState.builder().fileId("result1-for-some-id").status(MalwareScanFileState.Status.EXPIRED).build();
    MalwareScanFileState expected2 = MalwareScanFileState.builder().fileId("result2-for-some-id").status(MalwareScanFileState.Status.BAD).build();
    when(repository.load("some-id")).thenReturn(expected1).thenReturn(expected2);
    CachedMalwareScanFileStateRepository impl = new CachedMalwareScanFileStateRepository(repository);
    impl.load("some-id");
    impl.save("some-id", expected1, expected2);
    MalwareScanFileState actual = impl.load("some-id");
    verify(repository, times(1)).save("some-id", expected1, expected2);
    assertEquals(expected2, actual);
  }
}
