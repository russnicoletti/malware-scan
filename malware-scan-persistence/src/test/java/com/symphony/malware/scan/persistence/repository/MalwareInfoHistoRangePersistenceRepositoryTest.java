package com.symphony.malware.scan.persistence.repository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.symphony.data.infrastructure.IPersistenceInfra;
import com.symphony.data.mapper.IPaginatedIterable;
import com.symphony.data.mapper.IRangeTable;
import com.symphony.data.mapper.IResult;
import com.symphony.data.mapper.PersistentException;
import com.symphony.malware.scan.dto.MalwareInfo;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.CharEncoding;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import util.TemporalSupplier;

import java.io.Closeable;
import java.nio.charset.Charset;
import java.time.Instant;
import java.util.Iterator;
import java.util.List;
import java.util.function.Supplier;

@RunWith(MockitoJUnitRunner.class)
public class MalwareInfoHistoRangePersistenceRepositoryTest {

  private static final Charset CHARSET = Charset.forName(CharEncoding.UTF_8);
  private static final String MALWARE_INFO_HISTO_TABLE = "malwareInfoHisto";

  private static final String FILE_ID = "fileId0001";
  private static final Instant EPOCH_MILLI_0 = Instant.ofEpochMilli(0L);
  private static final Instant EPOCH_MILLI_1 = Instant.ofEpochMilli(1L);

  @Mock
  private IPersistenceInfra persistenceInfra;

  @Mock
  private TemporalSupplier<Instant> instantSupplier;

  @Mock
  private Supplier<ObjectMapper> objectMapperSupplier;

  @Mock
  private ObjectMapper objectMapper;

  @Mock
  private IRangeTable malwareInfoRangeTable;

  @Mock
  private Closeable closeable;

  @Mock
  private IPaginatedIterable<IResult> resultPaginatedIterable;

  @Mock
  private Iterator<IResult> resultIterator;

  @Mock
  private IResult result;

  @Before
  public void before() throws Exception {
    when(instantSupplier.min()).thenReturn(EPOCH_MILLI_0);
    when(instantSupplier.now()).thenReturn(EPOCH_MILLI_1);
    when(objectMapperSupplier.get()).thenReturn(objectMapper);
    when(persistenceInfra.getRangeTable(MALWARE_INFO_HISTO_TABLE)).thenReturn(malwareInfoRangeTable);
  }

  @Test
  public void createRepository_malwareInfoHistoTableExists_createTableNotCalled() throws Exception {
    when(malwareInfoRangeTable.exist()).thenReturn(Boolean.TRUE);

    new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier);

    verify(malwareInfoRangeTable, times(0)).createTable();
  }

  @Test
  public void createRepository_malwareInfoHistoTableDoesNotExist_createTableCalled() throws Exception {
    when(malwareInfoRangeTable.exist()).thenReturn(Boolean.FALSE);

    new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier);

    verify(malwareInfoRangeTable, times(1)).createTable();
  }

  @Test
  public void save_noException_malwareInfoPut() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).build();

    when(objectMapper.writeValueAsString(malwareInfo)).thenReturn("{}");
    new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier).save(FILE_ID, EPOCH_MILLI_1, malwareInfo);

    verify(objectMapper, times(1)).writeValueAsString(malwareInfo);
    verify(malwareInfoRangeTable, times(1)).save(eq(FILE_ID.getBytes(CHARSET)), eq(Long.toString(1L).getBytes(CHARSET)), any(byte[].class));
  }

  @Test
  public void save_jsonProcessingException_persistentExceptionThrown() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).build();

    when(objectMapper.writeValueAsString(malwareInfo)).thenThrow(new JsonMappingException(closeable, "JSON Mapping Exception"));

    assertThatThrownBy(() -> new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier)
        .save(FILE_ID, EPOCH_MILLI_1, malwareInfo)).isInstanceOf(PersistentException.class)
        .hasMessage("com.fasterxml.jackson.databind.JsonMappingException: JSON Mapping Exception");

    verify(objectMapper, times(1)).writeValueAsString(any(MalwareInfo.class));
    verify(malwareInfoRangeTable, times(0)).save(any(byte[].class), any(byte[].class), any(byte[].class));

  }

  @Test
  public void loadRange_byFileId_malwareInfosReturned() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).build();
    final byte[] malwareInfoBytes = ("{\"fileId\":\"" + FILE_ID + "\"}").getBytes(CHARSET);

    when(malwareInfoRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareInfoBytes);
    when(objectMapper.readValue(malwareInfoBytes, MalwareInfo.class)).thenReturn(malwareInfo);

    final List<MalwareInfo> malwareInfos = new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier).loadRange(FILE_ID);

    assertThat(malwareInfos).hasSize(1);
    assertThat(malwareInfos.get(0).getFileId()).isEqualTo(FILE_ID);

    verify(malwareInfoRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0.toEpochMilli()).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1.toEpochMilli()).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareInfoBytes, MalwareInfo.class);
    verify(instantSupplier, times(1)).min();
    verify(instantSupplier, times(1)).now();
  }

  @Test
  public void loadRange_byFileIdAndFrom_malwareInfosReturned() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).build();
    final byte[] malwareInfoBytes = ("{\"fileId\":\"" + FILE_ID + "\"}").getBytes(CHARSET);

    when(instantSupplier.min()).thenReturn(EPOCH_MILLI_0);
    when(malwareInfoRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareInfoBytes);
    when(objectMapper.readValue(malwareInfoBytes, MalwareInfo.class)).thenReturn(malwareInfo);

    final List<MalwareInfo> malwareInfos = new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier)
        .loadRange(FILE_ID, EPOCH_MILLI_0);

    assertThat(malwareInfos).hasSize(1);
    assertThat(malwareInfos.get(0).getFileId()).isEqualTo(FILE_ID);

    verify(malwareInfoRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0.toEpochMilli()).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1.toEpochMilli()).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareInfoBytes, MalwareInfo.class);
    verify(instantSupplier, times(0)).min();
    verify(instantSupplier, times(1)).now();
  }

  @Test
  public void loadRange_byFileIdAndFromAndTo_malwareInfosReturned() throws Exception {
    final MalwareInfo malwareInfo = MalwareInfo.builder().fileId(FILE_ID).build();
    final byte[] malwareInfoBytes = ("{\"fileId\":\"" + FILE_ID + "\"}").getBytes(CHARSET);

    when(malwareInfoRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareInfoBytes);
    when(objectMapper.readValue(malwareInfoBytes, MalwareInfo.class)).thenReturn(malwareInfo);

    final List<MalwareInfo> malwareInfos = new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier)
        .loadRange(FILE_ID, EPOCH_MILLI_0, EPOCH_MILLI_1);

    assertThat(malwareInfos).hasSize(1);
    assertThat(malwareInfos.get(0).getFileId()).isEqualTo(FILE_ID);

    verify(malwareInfoRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0.toEpochMilli()).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1.toEpochMilli()).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareInfoBytes, MalwareInfo.class);
    verify(instantSupplier, times(0)).min();
    verify(instantSupplier, times(0)).now();
  }

  @Test
  public void loadRange_jsonProcessingException_persistentExceptionThrown() throws Exception {
    final byte[] malwareInfoBytes = ("{\"fileId\":\"" + FILE_ID + "\"}invalid").getBytes(CHARSET);

    when(malwareInfoRangeTable.batchLoad(eq(FILE_ID.getBytes(CHARSET)), any(byte[].class), any(byte[].class))).thenReturn(resultPaginatedIterable);
    when(resultPaginatedIterable.iterator()).thenReturn(resultIterator);
    when(resultIterator.hasNext()).thenReturn(Boolean.TRUE).thenReturn(Boolean.FALSE);
    when(resultIterator.next()).thenReturn(result);
    when(result.getPayload()).thenReturn(malwareInfoBytes);
    when(objectMapper.readValue(malwareInfoBytes, MalwareInfo.class)).thenThrow(new JsonMappingException(closeable, "JSON Mapping Exception"));

    assertThatThrownBy(() -> new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier)
        .loadRange(FILE_ID)).isInstanceOf(PersistentException.class)
        .hasMessage("com.fasterxml.jackson.databind.JsonMappingException: JSON Mapping Exception");

    verify(malwareInfoRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0.toEpochMilli()).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1.toEpochMilli()).getBytes(CHARSET));
    verify(objectMapper, times(1)).readValue(malwareInfoBytes, MalwareInfo.class);
    verify(instantSupplier, times(1)).min();
    verify(instantSupplier, times(1)).now();
  }

  @Test
  public void loadRange_persistentException_persistentExceptionRethrown() throws Exception {
    when(malwareInfoRangeTable.batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0.toEpochMilli()).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1.toEpochMilli()).getBytes(CHARSET))).thenThrow(new PersistentException("Failed to load batch", ""));

    assertThatThrownBy(() -> new MalwareInfoHistoRangePersistenceRepository(persistenceInfra, instantSupplier, objectMapperSupplier)
        .loadRange(FILE_ID)).isInstanceOf(PersistentException.class)
        .hasMessage("Failed to load batch");

    verify(malwareInfoRangeTable, times(1)).batchLoad(FILE_ID.getBytes(CHARSET), Long.toString(EPOCH_MILLI_0.toEpochMilli()).getBytes(CHARSET),
        Long.toString(EPOCH_MILLI_1.toEpochMilli()).getBytes(CHARSET));
    verify(objectMapper, times(0)).readValue(any(byte[].class), eq(MalwareInfo.class));
    verify(instantSupplier, times(1)).min();
    verify(instantSupplier, times(1)).now();
  }

}
