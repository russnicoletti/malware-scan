package com.symphony.malware.scan.persistence;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;

import com.symphony.circuitbreaker.CommandConfig;
import com.symphony.configuration.api.IProperty;
import com.symphony.configuration.api.exception.ConfigurationException;
import com.symphony.configuration.api.store.IConfigurationStore;
import com.symphony.data.factory.dynamodb.DynamoDBPersistenceInfraFactory;
import com.symphony.data.factory.gce.BigTablePersistenceInfraFactory;
import com.symphony.data.factory.hbase.HBasePersistenceInfraFactory;
import com.symphony.data.infrastructure.LightPersistenceLifecycle;
import com.symphony.healthchecks.indicators.AppsHealthStatus;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class PersistenceInfraProviderTest {

  @Mock
  private IProperty podNameProperty;

  @Mock
  private IProperty threadPoolNameProperty;

  @Mock
  private IConfigurationStore configurationStore;

  @Mock
  private PersistenceInfraInitializer persistenceInfraInitializer;

  @Before
  public void before() {
    System.clearProperty(PersistenceInfraProvider.DATA_STORAGE_PROPERTY_CONFIG);
  }

  @Test
  public void getPersistenceInfra_zookeeperPodNameIsNotSet_exceptionThrown() {
    assertThatThrownBy(() -> new PersistenceInfraProvider(configurationStore, persistenceInfraInitializer).get())
        .isInstanceOf(ConfigurationException.class)
        .hasMessage("pod/name property could not be found in configuration, but expected to exist");
  }

  @Test
  public void getPersistenceInfra_bigTableLegacyDataStorage_bigTableInfraProvided() throws Exception {
    System.setProperty(PersistenceInfraProvider.DATA_STORAGE_PROPERTY_CONFIG, LightPersistenceLifecycle.BIG_TABLE_LEGACY);

    when(podNameProperty.getValue()).thenReturn("test-pod-name");
    when(configurationStore.getProperty(PersistenceInfraProvider.POD_NAME_ZK_PATH)).thenReturn(podNameProperty);

    when(threadPoolNameProperty.getValue()).thenReturn("thred-pool-name");
    when(configurationStore.getProperty("circuitbreaker/data.bigtable/threadpool.name")).thenReturn(threadPoolNameProperty);

    when(persistenceInfraInitializer.init(eq(null), eq(configurationStore), any(CommandConfig.class), any(AppsHealthStatus.class), eq(LightPersistenceLifecycle.BIG_TABLE_LEGACY)))
        .thenReturn(new BigTablePersistenceInfraFactory());

    assertThat(new PersistenceInfraProvider(configurationStore, persistenceInfraInitializer).get()).isInstanceOf(BigTablePersistenceInfraFactory.class);
  }

  @Test
  public void getPersistenceInfra_bigTableDataStorage_bigTableInfraProvided() throws Exception {
    System.setProperty(PersistenceInfraProvider.DATA_STORAGE_PROPERTY_CONFIG, LightPersistenceLifecycle.BIG_TABLE);

    when(podNameProperty.getValue()).thenReturn("test-pod-name");
    when(configurationStore.getProperty(PersistenceInfraProvider.POD_NAME_ZK_PATH)).thenReturn(podNameProperty);

    when(threadPoolNameProperty.getValue()).thenReturn("thred-pool-name");
    when(configurationStore.getProperty("circuitbreaker/data.gcp.bigtable/threadpool.name")).thenReturn(threadPoolNameProperty);

    when(persistenceInfraInitializer.init(eq(null), eq(configurationStore), any(CommandConfig.class), any(AppsHealthStatus.class), eq(LightPersistenceLifecycle.BIG_TABLE)))
        .thenReturn(new BigTablePersistenceInfraFactory());

    assertThat(new PersistenceInfraProvider(configurationStore, persistenceInfraInitializer).get()).isInstanceOf(BigTablePersistenceInfraFactory.class);
  }

  @Test
  public void getPersistenceInfra_dynamoDataStorage_dynamoInfraProvided() throws Exception {
    System.setProperty(PersistenceInfraProvider.DATA_STORAGE_PROPERTY_CONFIG, LightPersistenceLifecycle.DYNAMODB);

    when(podNameProperty.getValue()).thenReturn("test-pod-name");
    when(configurationStore.getProperty(PersistenceInfraProvider.POD_NAME_ZK_PATH)).thenReturn(podNameProperty);

    when(threadPoolNameProperty.getValue()).thenReturn("thred-pool-name");
    when(configurationStore.getProperty("circuitbreaker/data.dynamo/threadpool.name")).thenReturn(threadPoolNameProperty);

    when(persistenceInfraInitializer.init(eq(null), eq(configurationStore), any(CommandConfig.class), any(AppsHealthStatus.class), eq(LightPersistenceLifecycle.DYNAMODB)))
        .thenReturn(new DynamoDBPersistenceInfraFactory());

    assertThat(new PersistenceInfraProvider(configurationStore, persistenceInfraInitializer).get()).isInstanceOf(DynamoDBPersistenceInfraFactory.class);
  }

  @Test
  public void getPersistenceInfra_hBaseDataStorage_hBaseInfraProvided() throws Exception {
    System.setProperty(PersistenceInfraProvider.DATA_STORAGE_PROPERTY_CONFIG, LightPersistenceLifecycle.HBASE);

    when(podNameProperty.getValue()).thenReturn("test-pod-name");
    when(configurationStore.getProperty(PersistenceInfraProvider.POD_NAME_ZK_PATH)).thenReturn(podNameProperty);

    when(threadPoolNameProperty.getValue()).thenReturn("thred-pool-name");
    when(configurationStore.getProperty("circuitbreaker/data.hbase/threadpool.name")).thenReturn(threadPoolNameProperty);

    when(persistenceInfraInitializer.init(eq(null), eq(configurationStore), any(CommandConfig.class), any(AppsHealthStatus.class), eq(LightPersistenceLifecycle.HBASE)))
        .thenReturn(new HBasePersistenceInfraFactory());

    assertThat(new PersistenceInfraProvider(configurationStore, persistenceInfraInitializer).get()).isInstanceOf(HBasePersistenceInfraFactory.class);
  }

  @Test
  public void getPersistenceInfra_nullDataStorage_hBaseInfraProvided() throws Exception {
    System.clearProperty(PersistenceInfraProvider.DATA_STORAGE_PROPERTY_CONFIG);

    when(podNameProperty.getValue()).thenReturn("test-pod-name");
    when(configurationStore.getProperty(PersistenceInfraProvider.POD_NAME_ZK_PATH)).thenReturn(podNameProperty);

    when(threadPoolNameProperty.getValue()).thenReturn("thred-pool-name");
    when(configurationStore.getProperty("circuitbreaker/data.hbase/threadpool.name")).thenReturn(threadPoolNameProperty);

    when(persistenceInfraInitializer.init(eq(null), eq(configurationStore), any(CommandConfig.class), any(AppsHealthStatus.class), eq(LightPersistenceLifecycle.HBASE)))
        .thenReturn(new HBasePersistenceInfraFactory());

    assertThat(new PersistenceInfraProvider(configurationStore, persistenceInfraInitializer).get()).isInstanceOf(HBasePersistenceInfraFactory.class);
  }

  @Test
  public void getPersistenceInfra_unknownDataStorage_exceptionThrown() throws Exception {
    System.setProperty(PersistenceInfraProvider.DATA_STORAGE_PROPERTY_CONFIG, "unknown");

    when(podNameProperty.getValue()).thenReturn("test-pod-name");
    when(configurationStore.getProperty(PersistenceInfraProvider.POD_NAME_ZK_PATH)).thenReturn(podNameProperty);

    when(threadPoolNameProperty.getValue()).thenReturn("thred-pool-name");
    when(configurationStore.getProperty("circuitbreaker/data.hbase/threadpool.name")).thenReturn(threadPoolNameProperty);

    when(persistenceInfraInitializer.init(eq(null), eq(configurationStore), any(CommandConfig.class), any(AppsHealthStatus.class), eq("unknown")))
        .thenThrow(new RuntimeException("Unsupported persistence implementation unknown"));

    assertThatThrownBy(() -> new PersistenceInfraProvider(configurationStore, persistenceInfraInitializer).get())
        .isInstanceOf(RuntimeException.class)
        .hasMessage("Unsupported persistence implementation unknown");
  }

}
