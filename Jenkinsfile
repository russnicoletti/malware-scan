@Library("sym-pipeline") _

node {
    def symCliRepo = env.MALWARE_SCAN_REPO ?: "symphony-client"
    def symCliOrg = env.MALWARE_SCAN_ORG ?: "SymphonyOSF"
    def symCliBranch = env.BRANCH_NAME ?: "master"
    withEnv(["PROJECT_TYPE=java",
             "GIT_REPO=${symCliRepo}",
             "GIT_ORG=${symCliOrg}",
             "GIT_BRANCH=${symCliBranch}"
    ]) {
        gitCheckout()

        def builderFactory = new BuilderFactory(env, steps)
        def builder = builderFactory.getBuilder()
        builder.build({
            runUnitTests = true
            measureCoverage = true
            buildType = "verify"
        })

        def util = new SymphonyCICDUtils()
        def isPullRequest = util.isPullRequest()
        if (isPullRequest) {
            echo "currentBuild.result Before Coverage Analysis - ${currentBuild.result}"
            stage('Coverage Analysis') {
                // diff-cover only makes sense if there is a target branch for the change (e.g. a pull request)
                diffCover(env.CHANGE_TARGET)
            }
            echo "currentBuild.result After Coverage Analysis - ${currentBuild.result}"

            echo "currentBuild.result Before Quality Analysis - ${currentBuild.result}"
            stage('Quality Analysis') {
                sonar()
            }
            echo "currentBuild.result After Quality Analysis - ${currentBuild.result}"
        }

    }
    sh """
            chmod 755 "./build.sh"
            ./build.sh
            """
}
