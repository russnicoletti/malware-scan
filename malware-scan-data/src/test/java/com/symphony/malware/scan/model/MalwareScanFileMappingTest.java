package com.symphony.malware.scan.model;

import static org.assertj.core.api.Assertions.assertThat;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanFileMappingTest {

  private final String FILE_ID = "file-id";
  private final String STREAM_ID = "stream-id";
  private final String MESSAGE_ID = "message-id";
  private final String STREAM_NAME = "stream-name";
  private final String STREAM_TYPE = "stream-type";
  private final String SENDING_POD_ID = "sending-pod-id";

  private final Long SENDER_ID = 17L;
  private final String SENDER_FIRST_NAME = "sender-first-name";
  private final String SENDER_LAST_NAME = "sender-last-name";
  private final String SENDER_EMAIL = "sender-email";

  private ObjectMapper objectMapper;

  @Before
  public void before() {
    objectMapper = new ObjectMapper().registerModule(new JavaTimeModule());
  }

  @Test
  public void serializeAndDeserialize() throws Exception {
    final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder()
        .fileId(FILE_ID)
        .streamId(STREAM_ID)
        .messageId(MESSAGE_ID)
        .streamName(STREAM_NAME)
        .streamType(STREAM_TYPE)
        .sendingPodId(SENDING_POD_ID)
        .sender(Sender.builder()
            .id(SENDER_ID)
            .firstName(SENDER_FIRST_NAME)
            .lastName(SENDER_LAST_NAME)
            .email(SENDER_EMAIL)
            .build())
        .build();

    final String serializedMalwareScanFileMapping = objectMapper.writeValueAsString(malwareScanFileMapping);
    final MalwareScanFileMapping deserializedMalwareScanFileMapping = objectMapper.readValue(serializedMalwareScanFileMapping, MalwareScanFileMapping.class);

    assertThat(deserializedMalwareScanFileMapping.getFileId()).isEqualTo(FILE_ID);
    assertThat(deserializedMalwareScanFileMapping.getStreamId()).isEqualTo(STREAM_ID);
    assertThat(deserializedMalwareScanFileMapping.getMessageId()).isEqualTo(MESSAGE_ID);
    assertThat(deserializedMalwareScanFileMapping.getStreamName()).isEqualTo(STREAM_NAME);
    assertThat(deserializedMalwareScanFileMapping.getStreamType()).isEqualTo(STREAM_TYPE);
    assertThat(deserializedMalwareScanFileMapping.getSender().getId()).isEqualTo(SENDER_ID);
    assertThat(deserializedMalwareScanFileMapping.getSender().getFirstName()).isEqualTo(SENDER_FIRST_NAME);
    assertThat(deserializedMalwareScanFileMapping.getSender().getLastName()).isEqualTo(SENDER_LAST_NAME);
    assertThat(deserializedMalwareScanFileMapping.getSender().getEmail()).isEqualTo(SENDER_EMAIL);
  }

  /**
   * Make sure that there is a good reason for adding a field to toString() method
   * Make sure that fields with sensitive information are not a part of a toString() method, as sensitive information should not end up in logs
   */
  @Test
  public void testToString() {
    final MalwareScanFileMapping malwareScanFileMapping = MalwareScanFileMapping.builder()
        .fileId(FILE_ID)
        .streamId(STREAM_ID)
        .messageId(MESSAGE_ID)
        .streamName(STREAM_NAME)
        .streamType(STREAM_TYPE)
        .sendingPodId(SENDING_POD_ID)
        .sender(Sender.builder()
            .id(SENDER_ID)
            .firstName(SENDER_FIRST_NAME)
            .lastName(SENDER_LAST_NAME)
            .email(SENDER_EMAIL)
            .build())
        .build();

    final String malwareScanFileMappingString = malwareScanFileMapping.toString();

    assertThat(malwareScanFileMappingString).contains("fileId=");
    assertThat(malwareScanFileMappingString).contains("streamId=");
    assertThat(malwareScanFileMappingString).contains("messageId=");
    assertThat(malwareScanFileMappingString).doesNotContain("streamName=");
    assertThat(malwareScanFileMappingString).doesNotContain("streamType=");
    assertThat(malwareScanFileMappingString).contains("sendingPodId=");
    assertThat(malwareScanFileMappingString).doesNotContain("sender=");
  }

}
