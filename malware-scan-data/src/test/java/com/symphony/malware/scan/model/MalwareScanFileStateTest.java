package com.symphony.malware.scan.model;

import static org.assertj.core.api.Assertions.assertThat;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanFileStateTest {

  private final String FILE_ID = "file-id";
  private final long VERSION = 7L;
  private final MalwareScanFileState.Status STATUS = MalwareScanFileState.Status.OK;
  private final Long TTL = 21L;
  private final Long CREATE_TIMESTAMP = 1L;
  private final Actor CREATED_BY = Actor.MALWARE_SCANNER;
  private final Long LAST_UPDATE_TIMESTAMP = 1L;
  private final Actor LAST_UPDATED_BY = Actor.MALWARE_SCANNER;
  private final Long LAST_SUBMISSION_ATTEMPT_TIMESTAMP = 1L;
  private final String CONTENT_TYPE = "content-type";
  private final String ORIGINAL_STREAM_ID = "original-stream-id";
  private final String ORIGINAL_MESSAGE_ID = "original-message-id";
  private final Long NUMBER_OF_RETRIES = 17L;
  private final String DETAILS_MESSAGE = "details-message";
  private final String DETAILS_TEXT = "details-text";
  private final String DETAILS_URL = "details-url";

  private ObjectMapper objectMapper;

  @Before
  public void before() {
    objectMapper = new ObjectMapper().registerModule(new JavaTimeModule());
  }

  @Test
  public void serializeAndDeserialize() throws Exception {
    final MalwareScanFileState malwareScanFileState = MalwareScanFileState.builder()
        .fileId(FILE_ID)
        .version(VERSION)
        .status(STATUS)
        .ttl(TTL)
        .createTimestamp(CREATE_TIMESTAMP)
        .createdBy(CREATED_BY)
        .lastUpdateTimestamp(LAST_UPDATE_TIMESTAMP)
        .lastUpdatedBy(LAST_UPDATED_BY)
        .lastSubmissionAttemptTimestamp(LAST_SUBMISSION_ATTEMPT_TIMESTAMP)
        .contentType(CONTENT_TYPE)
        .originalStreamId(ORIGINAL_STREAM_ID)
        .originalMessageId(ORIGINAL_MESSAGE_ID)
        .details(new MalwareScanFileStatusDetails(DETAILS_MESSAGE, DETAILS_TEXT, DETAILS_URL))
        .numberOfRetries(NUMBER_OF_RETRIES)
        .build();

    final String serializedMalwareScanFileState = objectMapper.writeValueAsString(malwareScanFileState);
    final MalwareScanFileState deserializedMalwareScanFileState = objectMapper.readValue(serializedMalwareScanFileState, MalwareScanFileState.class);

    assertThat(deserializedMalwareScanFileState.getFileId()).isEqualTo(FILE_ID);
    assertThat(deserializedMalwareScanFileState.getVersion()).isEqualTo(VERSION);
    assertThat(deserializedMalwareScanFileState.getStatus()).isEqualTo(STATUS);
    assertThat(deserializedMalwareScanFileState.getTtl()).isEqualTo(TTL);
    assertThat(deserializedMalwareScanFileState.getCreateTimestamp()).isEqualTo(CREATE_TIMESTAMP);
    assertThat(deserializedMalwareScanFileState.getCreatedBy()).isEqualTo(CREATED_BY);
    assertThat(deserializedMalwareScanFileState.getLastUpdateTimestamp()).isEqualTo(LAST_UPDATE_TIMESTAMP);
    assertThat(deserializedMalwareScanFileState.getLastUpdatedBy()).isEqualTo(LAST_UPDATED_BY);
    assertThat(deserializedMalwareScanFileState.getLastSubmissionAttemptTimestamp()).isEqualTo(LAST_SUBMISSION_ATTEMPT_TIMESTAMP);
    assertThat(deserializedMalwareScanFileState.getContentType()).isEqualTo(CONTENT_TYPE);
    assertThat(deserializedMalwareScanFileState.getOriginalStreamId()).isEqualTo(ORIGINAL_STREAM_ID);
    assertThat(deserializedMalwareScanFileState.getOriginalMessageId()).isEqualTo(ORIGINAL_MESSAGE_ID);
    assertThat(deserializedMalwareScanFileState.getDetails().getMessage()).isEqualTo(DETAILS_MESSAGE);
    assertThat(deserializedMalwareScanFileState.getDetails().getLink().getText()).isEqualTo(DETAILS_TEXT);
    assertThat(deserializedMalwareScanFileState.getDetails().getLink().getUrl()).isEqualTo(DETAILS_URL);
    assertThat(deserializedMalwareScanFileState.getNumberOfRetries()).isEqualTo(NUMBER_OF_RETRIES);
  }

  /**
   * Make sure that there is a good reason for adding a field to toString() method
   * Make sure that fields with sensitive information are not a part of a toString() method, as sensitive information should not end up in logs
   */
  @Test
  public void testToString() {
    final MalwareScanFileState malwareScanFileState = MalwareScanFileState.builder()
        .fileId(FILE_ID)
        .version(VERSION)
        .status(STATUS)
        .ttl(TTL)
        .createTimestamp(CREATE_TIMESTAMP)
        .createdBy(CREATED_BY)
        .lastUpdateTimestamp(LAST_UPDATE_TIMESTAMP)
        .lastUpdatedBy(LAST_UPDATED_BY)
        .lastSubmissionAttemptTimestamp(LAST_SUBMISSION_ATTEMPT_TIMESTAMP)
        .contentType(CONTENT_TYPE)
        .originalStreamId(ORIGINAL_STREAM_ID)
        .originalMessageId(ORIGINAL_MESSAGE_ID)
        .details(new MalwareScanFileStatusDetails(DETAILS_MESSAGE, DETAILS_TEXT, DETAILS_URL))
        .numberOfRetries(NUMBER_OF_RETRIES)
        .build();

    final String malwareScanFileStateString = malwareScanFileState.toString();

    assertThat(malwareScanFileStateString).contains("fileId=");
    assertThat(malwareScanFileStateString).contains("version=");
    assertThat(malwareScanFileStateString).contains("status=");
    assertThat(malwareScanFileStateString).doesNotContain("ttl=");
    assertThat(malwareScanFileStateString).contains("createTimestamp=");
    assertThat(malwareScanFileStateString).doesNotContain("createdBy=");
    assertThat(malwareScanFileStateString).doesNotContain("lastUpdateTimestamp=");
    assertThat(malwareScanFileStateString).doesNotContain("lastUpdatedBy=");
    assertThat(malwareScanFileStateString).doesNotContain("lastSubmissionAttemptTimestamp=");
    assertThat(malwareScanFileStateString).doesNotContain("contentType=");
    assertThat(malwareScanFileStateString).contains("originalStreamId=");
    assertThat(malwareScanFileStateString).contains("originalMessageId=");
    assertThat(malwareScanFileStateString).doesNotContain("details=");
    assertThat(malwareScanFileStateString).doesNotContain("numberOfRetries=");
  }
}
