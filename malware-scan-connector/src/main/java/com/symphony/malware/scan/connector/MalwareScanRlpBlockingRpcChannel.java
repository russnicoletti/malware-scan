package com.symphony.malware.scan.connector;

import static com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfigProvider.ConnectionRequestType;

import com.symphony.container.connector.AbstractRLPBlockingRpcChannel;
import com.symphony.container.connector.AbstractRLPProfilePublisher;
import com.symphony.container.connector.ConnectionIdUsageScenario;
import com.symphony.container.connector.DefaultRLPProfilePublisher;
import com.symphony.container.connector.metric.ContainerConnectorBaseMetrics;
import com.symphony.container.connector.metric.DefaultContainerConnectorBaseMetricsFactory;
import com.symphony.container.connector.metric.SymproxMetricReportCache;
import com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfig;
import com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfigProvider;
import com.symphony.remoteservice.longpoll.client.RLPService;
import com.symphony.remoteservice.longpoll.client.RLPUsageScenario;
import com.symphony.remoteservice.longpoll.client.tenant.TenantId;

import javax.annotation.Nullable;

/**
 * Generic implementation for blocking rlp channel
 */
public class MalwareScanRlpBlockingRpcChannel extends AbstractRLPBlockingRpcChannel<ConnectionRequestType, MalwareScanContainerConnectorConfig, MalwareScanRlpCallExecutor> {

  public MalwareScanRlpBlockingRpcChannel(
      final ConnectionIdUsageScenario connectionIdUsageScenario,
      final RLPUsageScenario rlpUsageScenario,
      final MalwareScanContainerConnector malwareScanContainerConnector,
      final SymproxMetricReportCache symproxMetricReportCache,
      @Nullable final RLPService rlpService,
      @Nullable final String connectionId,
      final MalwareScanRlpCallExecutor malwareScanRlpCallExecutor,
      final MalwareScanContainerConnectorConfigProvider malwareScanContainerConnectorConfigProvider,
      final ConnectionRequestType connectionRequestType,
      final TenantId tenantId
  ) {
    super(connectionIdUsageScenario, rlpUsageScenario, malwareScanContainerConnector, symproxMetricReportCache,
        rlpService, connectionId, malwareScanRlpCallExecutor, malwareScanContainerConnectorConfigProvider, connectionRequestType, tenantId);
  }

  @Override
  public ContainerConnectorBaseMetrics getContainerConnectorBaseMetrics() {
    return DefaultContainerConnectorBaseMetricsFactory.INSTANCE.getContainerConnectorMetrics();
  }

  @Override
  public AbstractRLPProfilePublisher getRlpProfilePublisher(final SymproxMetricReportCache symproxMetricReportCache) {
    return new DefaultRLPProfilePublisher(symproxMetricReportCache);
  }
}
