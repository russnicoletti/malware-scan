package com.symphony.malware.scan.connector;

import static com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfigProvider.ConnectionRequestType;

import com.symphony.configuration.api.store.IConfigurationStore;
import com.symphony.container.connector.ContainerConnector;
import com.symphony.container.connector.MetricInstanceIdProvider;
import com.symphony.container.connector.RLPConnectionListenerFactory;
import com.symphony.container.connector.legacy.LegacyConnectorInitializer;
import com.symphony.container.connector.selector.ConnectionSelectorConfigurationProvider;
import com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfig;

import com.hazelcast.core.HazelcastInstance;

import java.io.IOException;

/**
 * This is a wrapper for {@link ContainerConnector}, which provides specific malware scan related types,
 * so we won't have to specify those types all the time
 */
public class MalwareScanContainerConnector extends ContainerConnector<ConnectionRequestType, MalwareScanContainerConnectorConfig, MalwareScanRlpCallExecutor> {

  public MalwareScanContainerConnector(
      final ConnectionSelectorConfigurationProvider connectionSelectorConfigurationProvider,
      final IConfigurationStore configurationStore, final HazelcastInstance hazelcastInstance,
      final LegacyConnectorInitializer.LegacyConnectorInitializerFactory legacyConnectorInitializerFactory,
      final MetricInstanceIdProvider metricInstanceIdProvider, final RLPConnectionListenerFactory rlpConnectionListenerFactory
  ) throws IOException {
    super(connectionSelectorConfigurationProvider, configurationStore, hazelcastInstance,
        legacyConnectorInitializerFactory, metricInstanceIdProvider, rlpConnectionListenerFactory);
  }
}
