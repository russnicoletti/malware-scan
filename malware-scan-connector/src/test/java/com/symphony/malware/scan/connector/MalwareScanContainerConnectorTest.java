package com.symphony.malware.scan.connector;

import static com.symphony.container.connector.ContainerConnectorInitializer.CONTAINER_MANAGER;
import static com.symphony.container.connector.ContainerConnectorInitializer.HAZELCAST_NAMESPACE;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

import com.symphony.configuration.api.IProperty;
import com.symphony.configuration.api.store.IConfigurationStore;
import com.symphony.container.connector.ConnectionIdUsageScenario;
import com.symphony.container.connector.ContainerConnectorInitializer;
import com.symphony.container.connector.ContainerConnectorMessage;
import com.symphony.container.connector.ContainerResponse;
import com.symphony.container.connector.MetricInstanceIdProvider;
import com.symphony.container.connector.RLPConnectionListenerFactory;
import com.symphony.container.connector.metric.instance.ConnectionInstancesHealthMetric;
import com.symphony.container.connector.selector.ConnectionSelectorConfigurationProvider;
import com.symphony.container.connector.selector.RotationalSelectorConfig;
import com.symphony.malware.scan.connector.config.MalwareScanContainerConnectorConfig;
import com.symphony.proto3110.Message;
import com.symphony.remoteservice.longpoll.RemoteServiceMetric;
import com.symphony.remoteservice.longpoll.client.HeartBeatListener;
import com.symphony.remoteservice.longpoll.client.IConnectionListener;
import com.symphony.remoteservice.longpoll.client.RLPService;
import com.symphony.remoteservice.longpoll.client.RLPUsageScenario;
import com.symphony.remoteservice.longpoll.client.ReverseLongPollServiceProvider;
import com.symphony.services.rlp.RLP;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IMap;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MalwareScanContainerConnectorTest {

  private static final String SERVICE_NAME = "service-name";
  private static final String METHOD_NAME = "method-name";

  private static final String HAZELCAST_NAMESPACE_VALUE = "hazelcast-namespace-value";

  private static final String DEFAULT_SELECTOR_UNKNOWN = "UNKNOWN";

  private static final String RESPONSE_PAYLOAD = "response-payload";

  @Mock
  private IConfigurationStore configurationStore;

  @Mock
  private HazelcastInstance hazelcastInstance;

  @Mock
  private ConnectionSelectorConfigurationProvider connectionSelectorConfigurationProvider;

  @Mock
  private MetricInstanceIdProvider metricInstanceIdProvider;

  @Mock
  private ConnectionInstancesHealthMetric connectionInstancesHealthMetric;

  @Mock
  private RLPConnectionListenerFactory rlpConnectionListenerFactory;

  @Mock
  private IConnectionListener connectionListener;

  @Mock
  private HeartBeatListener heartBeatListener;

  @Mock
  private IProperty iProperty;

  @Mock
  private RotationalSelectorConfig rotationalSelectorConfig;

  @Mock
  private MalwareScanRlpCallExecutor malwareScanRlpCallExecutor;

  @Mock
  private MalwareScanContainerConnectorConfig malwareScanContainerConnectorConfig;

  @Mock
  private RemoteServiceMetric remoteServiceMetric;

  @Mock
  private Message requestMessage;

  @Mock
  private Message responseMessage;

  @Mock
  private Message responseMessagePrototype;

  @Mock
  private Message.Builder responseMessagePrototypeBuilder;

  @Test
  public void call() throws Exception {
    when(configurationStore.getProperty(HAZELCAST_NAMESPACE)).thenReturn(iProperty);
    when(iProperty.getValue()).thenReturn(HAZELCAST_NAMESPACE_VALUE);

    when(connectionSelectorConfigurationProvider.getRotationalSelectorConfig()).thenReturn(rotationalSelectorConfig);

    when(rlpConnectionListenerFactory.createConnectionEventListener()).thenReturn(connectionListener);
    when(rlpConnectionListenerFactory.createHeartBeatListener()).thenReturn(heartBeatListener);

    when(hazelcastInstance.getMap(HAZELCAST_NAMESPACE_VALUE + "_" + CONTAINER_MANAGER
        + "_remote-responses")).thenReturn(Mockito.mock(IMap.class));
    when(hazelcastInstance.getMap(HAZELCAST_NAMESPACE_VALUE + "_" + CONTAINER_MANAGER
        + "_remote-req-conn-assigned")).thenReturn(Mockito.mock(IMap.class));
    when(hazelcastInstance.getMap(HAZELCAST_NAMESPACE_VALUE + "_" + CONTAINER_MANAGER
        + "_remote-heartbeat-times")).thenReturn(Mockito.mock(IMap.class));

    final RLPService rlpService = new RLPService("");

    final RLP.ResponseHeader responseHeader = RLP.ResponseHeader.newBuilder().setResult(RLP.ResponseHeader.Result.OK).build();
    final byte[] responsePayload = RESPONSE_PAYLOAD.getBytes();

    final ReverseLongPollServiceProvider.ReverseLongPollServiceResult<ContainerConnectorMessage>
        reverseLongPollServiceResult = new ReverseLongPollServiceProvider.ReverseLongPollServiceResult<>(
        new ContainerConnectorMessage(responseHeader.toByteArray(), responsePayload), null);

    when(connectionSelectorConfigurationProvider.isRotationalMechanismEnable()).thenReturn(true);
    when(connectionSelectorConfigurationProvider.getDefaultSelector()).thenReturn(DEFAULT_SELECTOR_UNKNOWN);

    when(malwareScanRlpCallExecutor.execute(eq(SERVICE_NAME),
        eq(RLPUsageScenario.USE_RLP_SERVICE), any(ContainerConnectorMessage.class), eq(null), eq(rlpService),
        eq(malwareScanContainerConnectorConfig), eq(remoteServiceMetric), any(), any()
    )).thenReturn(reverseLongPollServiceResult);

    when(responseMessagePrototype.newBuilderForType()).thenReturn(responseMessagePrototypeBuilder);
    when(responseMessagePrototypeBuilder.mergeFrom(responsePayload)).thenReturn(responseMessagePrototypeBuilder);
    when(responseMessagePrototypeBuilder.build()).thenReturn(responseMessage);

    final ContainerConnectorInitializer containerConnectorInitializer = new ContainerConnectorInitializer(
        configurationStore, hazelcastInstance, connectionSelectorConfigurationProvider,
        metricInstanceIdProvider, connectionInstancesHealthMetric, rlpConnectionListenerFactory);

    final ContainerResponse<Message> containerResponse = new MalwareScanContainerConnector(containerConnectorInitializer).call(
        ConnectionIdUsageScenario.NOT_APPLICABLE, RLPUsageScenario.USE_RLP_SERVICE, SERVICE_NAME, METHOD_NAME, requestMessage,
        responseMessagePrototype, rlpService, null, remoteServiceMetric, malwareScanContainerConnectorConfig, malwareScanRlpCallExecutor);

    assertThat(containerResponse.getResponseHeader()).isEqualTo(responseHeader);
    assertThat(containerResponse.getMessage()).isEqualTo(responseMessage);
  }
}
